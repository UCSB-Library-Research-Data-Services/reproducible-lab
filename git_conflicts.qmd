---
title: "Managing git merge conflicts"
---

**You did nothing wrong!!** Git is simply asking for your help to merge files because it can not figure it out own its own. 

::: {.callout-note}
## A few things to note

1. `git pull` = `git fetch` (getting things from GitHub) + `git merge` (merging the versions between your local and GitHub)
2. How to minimize risk of conflicts? **Communicate** & `commit`, `pull`, and `push` often will already get you a long way!!
3. If conflicts keep happening in your collaboration, using `git branches` might be the next steps for your team
:::

A conflict arise when git can not merge two file versions automatically every time you `git pull`. Generally when the changes are on different files or on the same file but far apart, git will figure it out on his own and do the merge automatically. However if changes are overlapping, git will call you to the rescue. When you are in this situation, you are "stuck" between the `git fetch` & the `git merge`.


### Few tips to deal with merge conflicts

1. If you **were not expecting** a conflict or want to roll back to your status before the conflict arise

```bash
git merge --abort
```

This does not resolve the conflict but let you look more into why you are having a conflict while keeping your local copy of the repository usable.

2. If you **know for sure** what file version you want to keep:

 * keep the remote file: ```bashgit checkout --theirs conflicted_file.txt```
 * keep the local file: ```git checkout --ours conflicted_file.txt```

*=> You still have to* ```git add``` *and* ```git commit``` *after this*

3. If you do not know why there is a conflict:
  Dig into the files, looking for:

```bash
<<<<<<< HEAD
local version (ours)
=======
remote version (theirs)
>>>>>>> [remote version (commit#)]
```

Manually edit the file deleting and modifying your script as needed (including all the symbols git added to flag the conflict). Save the script/file when you are done editing.

::: {.callout-important}
=> You still have to use `git add` and `git commit` after this to commit your changes to the git history
:::

- You can always abort a merge, for example you choose to keep the wrong version

```bash
git merge --abort
```

If you realize you made a mistake once the merge resolved, you can always run to go back to the previous commit:

```bash
git reset --hard
```

## Example


