---
title: "Managing git merge conflicts"
---

First: `git pull` = `git fetch` (getting things from GitHub) + `git merge` (merging the versions between your local and GitHub)`

Second: you did nothing wrong!! Git tries to merge files automatically. When the changes on the same file are far apart, git will figure it out on his own and do the merge automatically. However if changes are overalpping, git will call you to the rescue.

### Few tips to deal with merge conflicts

1. If you **were not expecting** a conflict or want to roll back to your status before the conflict arise

```
git merge --abort
```

This does not resolve the conflict but let you look more into why you are having a conflict whiel keeping your local copy of the repository usable.

2. If you **know for sure** what file version you want to keep:

 * keep the remote file: ```git checkout --theirs conflicted_file.txt```
 * keep the local file: ```git checkout --ours conflicted_file.txt```

*=> You still have to* ```git add``` *and* ```git commit``` *after this*

3. If you do not know why there is a conflict:
  Dig into the files, looking for:

```bash
<<<<<<< HEAD
local version (ours)
=======
remote version (theirs)
>>>>>>> [remote version (commit#)]
```

Manually edit the file and save.

*=> You still have to* `git add` *and* `git commit` *after this*

- You can always abort a merge, for example you choose to keep the wrong version

```bash
git merge --abort
```
If you realize you made a mistake once the merge resolved, you can always run to go back to the previous commit:

```bash
git reset --hard
```

- tool: [Meld](http://meldmerge.org/)
	
### Few tips to avoid merge conflicts

- try to use the rebase instead of merge:

```bash
git pull --rebase
```

- pull before commiting: By doing a pull before committing, you can avoid a lot of git conflicts. Your git workflow should therefore be:

```bash
git add
git pull
commit -m "descriptive message"
git pull
git push
```

# References

## Git general introduction

- Jenny Bryan Happy git with R <http://happygitwithr.com/>
- Intro to GitHub and using git from RStudio GUI: <http://ohi-science.org/data-science-training/collaborating.html> 
- Intro to git and Github using the command line: <https://nceas.github.io/oss-lessons/version-control/1-git-basics.html>
- Try git in 15min: <https://try.github.io/levels/1/challenges/1>
- Git terminology: <https://www.atlassian.com/git/glossary/terminology>
- git `rebase` <https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase>

## Git workflows

- Comparing workflow: <https://www.atlassian.com/git/tutorials/comparing-workflows>
- Forking vs branching: <https://stackoverflow.com/questions/3611256/forking-vs-branching-in-github>
- Development workflow: <https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki/Development-workflow-with-Git:-Fork,-Branching,-Commits,-and-Pull-Request>

## Branches

- Interactive tutorial to learn more about git branches and more <https://learngitbranching.js.org/>

## Undoing things

- Help to decide how to undo your problem: <http://justinhileman.info/article/git-pretty/git-pretty.png>
- Undo almost everything with git <https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/>
- Difference between git reset soft, mixed and hard <https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/>
- Resetting, Checking Out & Reverting <https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting>