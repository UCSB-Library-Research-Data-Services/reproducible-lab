[
  {
    "objectID": "02-handson_github_rstudio.html",
    "href": "02-handson_github_rstudio.html",
    "title": "GitHub branches using RStudio",
    "section": "",
    "text": "Write and R script to compare the csv with your favorite desserts you modified previously with the top 42 most iconic American desserts\n\nClone the repository you just created about your favorite desserts\nCreate a new branch using RStudio and name it *myinitials*_rstudio\nStart a new script named desserts_match_*myinitials*.R\nAs pair programming, write a script should read a csv file of your favorite dessert (create it if you do not have one yet) and the csv file with the most iconic desserts (see code below) into R and find out if your favorite dessert is part of the most iconic desserts!\nPush your changes to GitHub\nOn the GitHub website, create a Pull Request (PR) and assign your teammate as reviewer\nReviewer – Review the PR. Make comments and/or OK the merge\nRequester – Merge and close the PR\n\n\n\n\n\n\n\nCode to get the iconic desserts listing\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)  # use to scrape website content\n\n# Check if that data folder exists and creates it if not\ndir.create(\"data\", showWarnings = FALSE)\n\n# Read the webpage code\nwebpage &lt;- read_html(\"https://www.eatthis.com/iconic-desserts-united-states/\")\n\n# Extract the desserts listing\ndessert_elements&lt;- html_elements(webpage, \"h2\")\ndessert_listing &lt;- dessert_elements %&gt;% \n  html_text2() %&gt;%             # extracting the text associated with this type of elements of the webpage\n  as_tibble() %&gt;%              # make it a data frame\n  rename(dessert = value) %&gt;%  # better name for the column\n  head(.,-3) %&gt;%               # 3 last ones were not desserts \n  rowid_to_column(\"rank\") %&gt;%  # adding a column using the row number as proxy for the rank\n  write_csv(\"data/iconic_desserts.csv\") # save it as csv",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Hands-on: Branches using RStudio"
    ]
  },
  {
    "objectID": "02-handson_github_rstudio.html#is-your-fav-dessert-iconic",
    "href": "02-handson_github_rstudio.html#is-your-fav-dessert-iconic",
    "title": "GitHub branches using RStudio",
    "section": "",
    "text": "Write and R script to compare the csv with your favorite desserts you modified previously with the top 42 most iconic American desserts\n\nClone the repository you just created about your favorite desserts\nCreate a new branch using RStudio and name it *myinitials*_rstudio\nStart a new script named desserts_match_*myinitials*.R\nAs pair programming, write a script should read a csv file of your favorite dessert (create it if you do not have one yet) and the csv file with the most iconic desserts (see code below) into R and find out if your favorite dessert is part of the most iconic desserts!\nPush your changes to GitHub\nOn the GitHub website, create a Pull Request (PR) and assign your teammate as reviewer\nReviewer – Review the PR. Make comments and/or OK the merge\nRequester – Merge and close the PR\n\n\n\n\n\n\n\nCode to get the iconic desserts listing\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)  # use to scrape website content\n\n# Check if that data folder exists and creates it if not\ndir.create(\"data\", showWarnings = FALSE)\n\n# Read the webpage code\nwebpage &lt;- read_html(\"https://www.eatthis.com/iconic-desserts-united-states/\")\n\n# Extract the desserts listing\ndessert_elements&lt;- html_elements(webpage, \"h2\")\ndessert_listing &lt;- dessert_elements %&gt;% \n  html_text2() %&gt;%             # extracting the text associated with this type of elements of the webpage\n  as_tibble() %&gt;%              # make it a data frame\n  rename(dessert = value) %&gt;%  # better name for the column\n  head(.,-3) %&gt;%               # 3 last ones were not desserts \n  rowid_to_column(\"rank\") %&gt;%  # adding a column using the row number as proxy for the rank\n  write_csv(\"data/iconic_desserts.csv\") # save it as csv",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Hands-on: Branches using RStudio"
    ]
  },
  {
    "objectID": "preserve_code.html",
    "href": "preserve_code.html",
    "title": "Preserve your code",
    "section": "",
    "text": "https://twitter.com/cjm4189/status/1557346489613094914\n\n\n\n\nIt is important to make your code easy to read if you hope that others will reuse it. It starts with using a consistent style witing your scripts (at least within a project).\n\nHere is a good style guide for R: https://style.tidyverse.org/\nStyle guide for Python: https://www.python.org/dev/peps/pep-0008/\n\n\nimport this\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\nThere is also the visual aspect of the code that should not be neglected. Like prose, if you receive a long text without any paragraphs, you might be not very excited about reading it. Indentation, spaces, and empty lines should be leveraged to make a script visually inviting and easy to read. The good news is that most Integrated Development Environments (IDEs) will help you to do so by auto formatting your scripts according to conventions. Note that also a lot of IDEs, such as RStudio, rely on some conventions to ease the navigation of scripts and notebooks. For example, try to add four - or # after a line starting with one or several # in an R Script!",
    "crumbs": [
      "Preserving things",
      "Your code"
    ]
  },
  {
    "objectID": "preserve_code.html#making-your-code-readable",
    "href": "preserve_code.html#making-your-code-readable",
    "title": "Preserve your code",
    "section": "",
    "text": "https://twitter.com/cjm4189/status/1557346489613094914\n\n\n\n\nIt is important to make your code easy to read if you hope that others will reuse it. It starts with using a consistent style witing your scripts (at least within a project).\n\nHere is a good style guide for R: https://style.tidyverse.org/\nStyle guide for Python: https://www.python.org/dev/peps/pep-0008/\n\n\nimport this\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n\nThere is also the visual aspect of the code that should not be neglected. Like prose, if you receive a long text without any paragraphs, you might be not very excited about reading it. Indentation, spaces, and empty lines should be leveraged to make a script visually inviting and easy to read. The good news is that most Integrated Development Environments (IDEs) will help you to do so by auto formatting your scripts according to conventions. Note that also a lot of IDEs, such as RStudio, rely on some conventions to ease the navigation of scripts and notebooks. For example, try to add four - or # after a line starting with one or several # in an R Script!",
    "crumbs": [
      "Preserving things",
      "Your code"
    ]
  },
  {
    "objectID": "preserve_code.html#comments",
    "href": "preserve_code.html#comments",
    "title": "Preserve your code",
    "section": "Comments",
    "text": "Comments\nReal Programmers don’t comment their code. If it was hard to write, it should be hard to understand.\nTom Van Vleck, based on people he knew…_ (https://multicians.org/thvv/realprogs.html)\nJoke aside, it is really hard to comment too much your code, because even steps that might seem trivial today might not be so anymore in a few weeks or months for now. In addition, well commented code is more likely to be read by others. Note also that comments should complement the code and should not being seen as work around vague naming conventions of variables or functions, but neither should they simple restate what the code is doing.\n\nx &lt;- 9.81  #  gravitational acceleration               POOR\ngravity_acc &lt;- 9.81  #  gravitational acceleration     BETTER\n\nname_index &lt;- 0  # set name_index to 0                 POOR\nname_index &lt;- 0                                        BETTER\n\n\nHeader\nIt is good to add a header to your script that will provide basic information such as:\n\nPurpose of the script (Long title style)\nWho are the authors\nA contact email\nHow to run, if the code is a program\n\nOptional:\n\nA longer description about the script purpose\nA starting date and potentially last updated one, although this information becomes redundant with repository information\n\nNote that R Studio does something similar by default when creating a new R Markdown document!\n\n\nInline\nIt does not matter if you are using a script or notebook. It is important to provide comments along your code to complement it by:\n\nExplaining what the code does\nCapturing decisions that were made on the analytical side. For example, why a specific value was used for a threshold.\nSpecifying why and when code was added to handle an edge case such as an unexpected value in the data (so a new user doesn’t have to guess what the code does and might want to delete it assuming it is not necessary)\n\nOther thoughts:\n\nIt is OK to state (what seems) the obvious (some might disagree with this statement)\nTry to keep comments to the point and short\n\n\n\nFunctions\nBoth Python and R have conventions on how to document functions. Adopting those conventions will help you to make your code readable but also to automate part of the documentation development.\n\nRoxygen2\nThe goal of roxygen2 is to make documenting your code as easy as possible. It can dynamically inspect the objects that it’s documenting, so it can automatically add data that you’d otherwise have to write by hand.\nHow do we insert it? Make sure you cursor is inside the function you want to document and from RStudio Menu Code -&gt; Insert Roxygen Skeleton\nExample:\n\n#' Add together two numbers\n#'\n#' @param x A number\n#' @param y A number\n#' @return The sum of \\code{x} and \\code{y}\n#' @examples\n#' add(1, 1)\n#' add(10, 1)\nadd2 &lt;- function(x, y) {\n  x + y\n}\n\nTry it! - Copy the function (without the documentation) in a new script - Add a third parameter to the function such as it sums 3 numbers - Add the Roxygen skeleton - Fill it to best describe your function\nNote that when you are developing an R package, the Roxygen skeleton can be leveraged to develop the help pages of your package so you only have one place to update and the help will synchronize automatically.\n\n\nPython Docstring\nA docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. Such a docstring becomes the __doc__ special attribute of that object.\n\ndef complex(real=0.0, imag=0.0):\n    \"\"\"Form a complex number.\n\n    Keyword arguments:\n    real -- the real part (default 0.0)\n    imag -- the imaginary part (default 0.0)\n    \"\"\"\n    if imag == 0.0 and real == 0.0:\n        return complex_zero\n\nGo here for more information: https://www.python.org/dev/peps/pep-0257/",
    "crumbs": [
      "Preserving things",
      "Your code"
    ]
  },
  {
    "objectID": "preserve_code.html#leveraging-notebooks",
    "href": "preserve_code.html#leveraging-notebooks",
    "title": "Preserve your code",
    "section": "Leveraging Notebooks",
    "text": "Leveraging Notebooks\nWe have focused on and been experimenting with Notebooks during the week because they provide space to further develop content, such as methodology, around the code you are developing in your analysis. Notebooks also enable you to integrate the outputs of your scientific research with the code that was used to produce it. Finally, notebooks can be rendered into various formats that allows them to be shared with a broad audience.\nNotebooks are not only used within the scientific community, see here for some thoughts from Airbnb data science team.",
    "crumbs": [
      "Preserving things",
      "Your code"
    ]
  },
  {
    "objectID": "preserve_code.html#hands-on",
    "href": "preserve_code.html#hands-on",
    "title": "Preserve your code",
    "section": "Hands-on",
    "text": "Hands-on\n\nDocumenting\n\ngetPercent &lt;- function( value, pct ) {\n    result &lt;- value * ( pct / 100 )\n    return( result )\n}\n\nTry adding the Roxygen Skeleton to this function and fill all the information you think is necessary to document the function\n\n\nCommenting\nLet’s try to improve the readability and documentation of this repository: https://github.com/brunj7/better-comments. Follow the instructions on the README\nFor inspiration, you can check out the NASA code for APOLLO 11 dating from 1969: https://github.com/chrislgarry/Apollo-11!!",
    "crumbs": [
      "Preserving things",
      "Your code"
    ]
  },
  {
    "objectID": "preserve_code.html#code-repositories",
    "href": "preserve_code.html#code-repositories",
    "title": "Preserve your code",
    "section": "Code repositories",
    "text": "Code repositories\nOn-line code repositories are a great way to version and share your code. Here are a few examples of git-based code repositories:\n\nGitHub\nGitLab\nBitbucket\nSourceForge\n\nNote however that there is no long-term commitment of any of those main code repositories and that archiving the specific snapshot of your code that was used for a specific analysis along your data is a great idea. Several data repositories offer an integration that lets you do that with data repositories. For example, Zenodo has a great integration with GitHub that lets you issue a DOI for a specific release (read snapshot) of your repository and preserve it independently from the code repository. See here for more details.\nNote that code repositories and data repositories complement each other: you can see your code repository as the live version of your work and the code snapshot archive as the historical trace that was produced for a specific analysis. In other words, we recommend linking both the code repository and its snapshot to the data archive.",
    "crumbs": [
      "Preserving things",
      "Your code"
    ]
  },
  {
    "objectID": "github_intro.html",
    "href": "github_intro.html",
    "title": "Version Control with Git and GitHub",
    "section": "",
    "text": "Every file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\n\n\n\n\n\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using “save as” as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between Git and GitHub?\n\nGit: is version control tool used to track versions of files in a folder or “repository” (to use git’s terminology).\n\nIt is open source software – the Git project uses Git!\nIt works best for tracking revisions to plain-text files.\n\nGitHub: is web-based platform for storing git repositories developing software collaboratively.\n\nIt adds many features to manage projects and document your work.\nit is a commercial product from Microsoft.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#the-problem-with-save-as",
    "href": "github_intro.html#the-problem-with-save-as",
    "title": "Version Control with Git and GitHub",
    "section": "",
    "text": "Every file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\n\n\n\n\n\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using “save as” as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between Git and GitHub?\n\nGit: is version control tool used to track versions of files in a folder or “repository” (to use git’s terminology).\n\nIt is open source software – the Git project uses Git!\nIt works best for tracking revisions to plain-text files.\n\nGitHub: is web-based platform for storing git repositories developing software collaboratively.\n\nIt adds many features to manage projects and document your work.\nit is a commercial product from Microsoft.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#git",
    "href": "github_intro.html#git",
    "title": "Version Control with Git and GitHub",
    "section": "Git",
    "text": "Git\nThis section focuses on the code versioning tool, Git. There are others tools for source code management, such as Mercurial and Subversion, but Git is the most widely used.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. Git was initially designed and developed to track the development of the Linux kernel.\nWhat git is not:\n\nGit is not a backup per se.\nGit is not good at versioning large files. It works best with plain-text files, not large data sets.\n\n\n\n\n\n\n\nFun fact\n\n\n\n\n\nGit was initially designed and developed in 2005 to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google engineers.\n\n\n\n\nRepository\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there are many ways to start a new repository, GitHub (or any other cloud solution, such as GitLab) provides among the most convenient way of starting a repository.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#github",
    "href": "github_intro.html#github",
    "title": "Version Control with Git and GitHub",
    "section": "GitHub",
    "text": "GitHub\nGitHub is a company that hosts git repositories online and provides collaboration features like forking and pull requests. GitHub has a large user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data.\n\nGitHub Dashboard\nThis is the default landing page when you log into your account. It provides a mix of the most recent resources and activities of your and your collaborators’ actions, as well as some resources relevant to your work. The dashboard therefore changes on a regular basis. Once logged in, you can access your dashboard at https://github.com\n\n\n\n\n\n\n\nGtiHub User page\nThis page can be reached using the following URL: https://github.com/username. For my username (brunj7) it would be: https://github.com/brunj7. It is a great space for you to provide some information about yourself and the main repositories you are working on. It also lists the GitHub Organizations you are part of. But more importantly, Users own repositories to host and share their code. You can list repositories from a User by clicking on the repositories tab in the main GitHub menu bar at the top.\n\n\n\n\n\n\n\nGitHub Organization page\nWe will talk more about GitHub Organizations later. In a nutshell, organizations are like groups or teams that users can be members of. Like Users, Organizations can have a landing page and own repositories. However, they add several perks in terms of user management. Similarly to Users, you can access repositories from an Organization by clicking on the repositories tab in the main GitHub menu bar at the top. You can access an organization’s page similarly to a user: https://github.com/organization-name; e.g. https://github.com/UCSB-Library-Research-Data-Services\n\n\n\n\n\n\n\nLet’s look at a repository on GitHub\nThe screenshot below shows the landing page of a repository on GitHub. We would like to highlight different important parts of this view:\n\nDirectly under the navigation bar (top-left) you will find the name of the repository (orange)\nAbove the files listing, there is information about the latest commit to this repository (blue)\nOn the left, you will have the files and folder names (red)\nIn the middle, the last commit message on this file (or file contained in a folder) (purple)\nOn the right, the time stamps of the latest commit (green)\n\n\n\n\n\n\nBelow the file listing, there will be a rendering of the README.md file, one more reason to make sure to add one 🙂. Looking into more details at the information provided about the last commit, we can see that we know:\n\nWhich user made the last commit (brunj7) and the associated commit message\nThe the 7 first digit of unique identifier (SHA) of this commit\nWhen this last commit was made (3 months ago) = The total number of commits on this branch (43 Commits)\n\n\n\n\n\n\nThis total number of commits is a hyperlink that lets you access the full history of the main branch by clicking on it.\n\n\n\n\n\nWe can keep drilling and look at a specific commit by clicking on the hash number listed on the right. For example, we can look at the first commit at the top (d2b75a5) and display the exact changes that have been made since the previous (also named parent) commit 20bc390:\n\n\n\n\n\nTracking these changes, and seeing how they relate to scripts and files is exactly what Git and GitHub are good for. We will show how they can be effective for tracking versions of scientific code, figures, and other text files such as manuscripts to develop a reproducible workflow.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#recap",
    "href": "github_intro.html#recap",
    "title": "Version Control with Git and GitHub",
    "section": "Recap",
    "text": "Recap\n\nGitHub.com / your dashboard (if logged in): https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/UCSB-Library-Research-Data-Services",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#recommended-reading",
    "href": "github_intro.html#recommended-reading",
    "title": "Version Control with Git and GitHub",
    "section": "Recommended reading",
    "text": "Recommended reading\nBraga PHP, Hébert K, Hudgins EJ, Scott ER, Edwards BPM, Sánchez Reyes LL, et al. Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution. Methods in Ecology and Evolution. 2023;14: 1364–1380. doi:10.1111/2041-210X.14108",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#aknowledgements",
    "href": "github_intro.html#aknowledgements",
    "title": "Version Control with Git and GitHub",
    "section": "Aknowledgements",
    "text": "Aknowledgements\nThis materials was adapted from NCEAS Reproducible Research Techniques for Synthesis & Collaborative Coding with GitHub. LNO Scientific Computing Team.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: Git & GitHub"
    ]
  },
  {
    "objectID": "git_conflicts.html",
    "href": "git_conflicts.html",
    "title": "Managing git merge conflicts",
    "section": "",
    "text": "You did nothing wrong!! Git is simply asking for your help to merge files because it can not figure it out on its own.\n\n\n\n\n\n\nOne thing to note before we continue\n\n\n\ngit pull = git fetch (getting things from GitHub) + git merge (merging the versions between your local and GitHub)\n\n\nA conflict arises when git can not automatically merge two versions of a file. When the changes are on different files or on the same file but far apart, git will figure it out on his own and do the merge automatically. However, if changes are overlapping, git will call you to the rescue because it is not sure which version should be kept. When you are in this situation, you are “stalled” between the git fetch & the git merge and you need to edit the file(s) where there is a conflict. Luckily, git will flag the lines that have different versions for you to look at.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Managing conflicts"
    ]
  },
  {
    "objectID": "git_conflicts.html#how-to-minimize-the-risk-of-conflicts",
    "href": "git_conflicts.html#how-to-minimize-the-risk-of-conflicts",
    "title": "Managing git merge conflicts",
    "section": "How to minimize the risk of conflicts?",
    "text": "How to minimize the risk of conflicts?\n\nCommunicate!! Who is working on what script/file today? GitHub issues and tagging people is a great way to do this\ncommit, pull, and push often , so the changes between versions are kept minimal\n\nThese two tips should help you on your git conflict free journey!!\nIf conflicts keep happening in your collaboration, using git branches might be the next step to consider for your team.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Managing conflicts"
    ]
  },
  {
    "objectID": "git_conflicts.html#example-using-rstudio",
    "href": "git_conflicts.html#example-using-rstudio",
    "title": "Managing git merge conflicts",
    "section": "Example using RStudio",
    "text": "Example using RStudio\nOk, let’s create a conflict with our favorite desserts repository.\nUser 1 is going to change a line on the README an push the change to GitHub.\n\n\n\n\n\nNow user 2, is going to also make an edit to the README on this same line while forgetting to pull before starting to edit the file\nIn this example, we will be changing the favorite dessert of the same person:\n\n\n\n\n\nSave and commit your changes.\nNow it is time to pull and push your changes… however git is unsure how to reconcile the two versions of the README.md\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBefore this you might first have the pop-up below on your screen that prompts you to tell git what techniques it should use to resolve conflicts\n\n\n\n\n\nWe recommend to choose the merge option by copy-pasting this line in the terminal:\ngit config pull.rebase false\n\n\nNote the tags that git has automatically inserted in the text to highlight: 1. where is the conflict and 2. what are the two versions you are trying to reconcile. Note also that RStudio is flagging the file with an orange U logo to let you know that the files are Unmerged.\n\n\n\n\n\nYou can edit the README to resolve the conflict to your liking. You could opt to choose one of the version\n\n\n\n\n\nor to come up with a “blended” version:\n\n\n\n\n\nOnce you are satisfied with your version, you can save the file and commit your changes\n\n\n\n\n\nDon’t forget to pull and push to synchronize your local changes with GitHub.\nIf you now look at the history, you can see how git has tracked the conflict resolution. We will talk about branches later on, but spoiler alert it looks very much how you would merge a branch back to the main branch.\n\n\n\n\n\n\nTips to reduce conflicts\n\nAlways start your working sessions with a pull and Commit often in small chunks\nThis can be often avoided by good communication about who is working on various sections of each file, and trying to avoid overlaps. But sometimes it happens, and git is there to warn you about potential problems. And git will not allow you to overwrite one person’s changes to a file with another’s changes to the same file if they were based on the same version.\nEncapsulate your work using branches and forks. This allows you to work on your modifications without interfering with your collaborator’s work until you decide it is time to merge your changes via a Pull Request. Note this can still create conflicts between versions but at least you are in control of when it will happen and the Pull Request is a great opportunity to discuss conflicts with your collaborators.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Managing conflicts"
    ]
  },
  {
    "objectID": "datamgmt_manage.html",
    "href": "datamgmt_manage.html",
    "title": "Manage your data as you go",
    "section": "",
    "text": "While actively working on your projects, there are several practices that can help you to manage your data in an efficient manner that will help you to collaborate with others (including your futureself!) and make your work more reproducible.",
    "crumbs": [
      "Managing your Lab data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#track-your-data-sources",
    "href": "datamgmt_manage.html#track-your-data-sources",
    "title": "Manage your data as you go",
    "section": "Track your data sources",
    "text": "Track your data sources\nAs you collect your data, if using pre-existing data sources, we strongly recommend that you keep track of where/by whom you accessed the data you will use. It can be a link to a data archive, an official agency website, or the contact information of a person. This data log can be developed using a spreadsheet that you can share with your team. The goal here is to make sure you can:\n\nGo back to the original source and the right version of the data\nCorrectly attribute/cite the data sources when you project\nReach out to data creators and ask for potential clarifications you might need to correctly interpret the data\nInquiry for any data updates at a later date",
    "crumbs": [
      "Managing your Lab data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#keep-raw-data-raw",
    "href": "datamgmt_manage.html#keep-raw-data-raw",
    "title": "Manage your data as you go",
    "section": "Keep raw data raw",
    "text": "Keep raw data raw\nDuring the data collection phase, also make sure to create a dedicated folder(s) to save the raw data version you just acquired.\nIf you are using a programmatic approach to acquire your data (e.g., API), make sure to only read the raw data and save any processed intermediate data products in a different folder. We recommend changing the permissions on your raw data folder to read-only to avoid any unexpected incidents.\nIf you are accessing the data using a Graphical User Interface (GUI), we recommend you create a “working copy” of your raw data in a separate folder and use those files as it is often very easy to accidentally overwrite it.",
    "crumbs": [
      "Managing your Lab data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#project-organization",
    "href": "datamgmt_manage.html#project-organization",
    "title": "Manage your data as you go",
    "section": "Project organization",
    "text": "Project organization\nWe generally recommend encapsulating your project into few folders. It will make it more portable when combined with a relative path and help you keep the information centralized in one place. Here is a potential starting point for your file structure with three subfolders:\n\nData: where you will store your data with the following file structure\n\nInput_data: to store the raw data you collected or/and are reusing\nIntermediate_data: to store any cleaned or merged data sets\nAnalysis_data: any model analytical outputs that you computed\n\nCode or Scripts: you can store your scripts in this folder. You can keep everything within the folder using filename to organize it or create subfolders as needed\nResults: to store tables, graphs, reports, or any other scientific products you are producing\n\nIn the top-level folder, we also recommend you write a README to explain your project, list the contributors and provide information on how to best navigate your project folder as well as a short description of the files it contains.\n\n\n\nSource: RDS Data Literacy Series\n\n\nThink of what README template could be developed for your research lab to help with standardizing this information across projects.",
    "crumbs": [
      "Managing your Lab data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#adopt-a-consistent-naming-convention",
    "href": "datamgmt_manage.html#adopt-a-consistent-naming-convention",
    "title": "Manage your data as you go",
    "section": "Adopt a consistent naming convention",
    "text": "Adopt a consistent naming convention\nDevelop naming conventions for files and folders:\n\nAvoid spaces (use underscores or dashes)\nAvoid punctuation or special characters\nTry to leverage alphabetical order (e.g., start with dates: 2020-05-08)\nUse descriptive naming (lite metadata)\nUse folders to structure/organize content\nKeep it simple\nMake it programmatically useful:\n\nUseful to select files (Wildcard *, regular expression)\nBut don’t forget Humans need to read file names too!!\nTip: leverage the use of _ and - to make your filename readable by both Humans and machines!\n\n\n\nTry it:\nWhich filename would be the most useful?\n\n06-2020-08-sensor2-plot1.csv\n2020-05-08_light-sensor-1_plot-1.csv\nMeasurement 1.csv\n2020-05-08-light-sensor-1-plot-2.csv\n2020-05-08-windSensor1-plot3.csv\n\nRemember, the most important is to make it consistent!\nA good reference on this topic from Jenny Bryan (Posit).",
    "crumbs": [
      "Managing your Lab data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#backup-your-data",
    "href": "datamgmt_manage.html#backup-your-data",
    "title": "Manage your data as you go",
    "section": "Backup your data",
    "text": "Backup your data\nDon’t forget, things happen!!!",
    "crumbs": [
      "Managing your Lab data",
      "Manage"
    ]
  },
  {
    "objectID": "preserve_license.html",
    "href": "preserve_license.html",
    "title": "Choosing a License",
    "section": "",
    "text": "It is a good practice to add a license to a repository/project. It will help to clarify what are the expectations regarding using and potentially contributing to this work.",
    "crumbs": [
      "Preserving things",
      "Licensing"
    ]
  },
  {
    "objectID": "preserve_license.html#code",
    "href": "preserve_license.html#code",
    "title": "Choosing a License",
    "section": "Code",
    "text": "Code\nHere is a good website to choose a license for your code: https://choosealicense.com/\nHere is also a good set of instructions on how to make this happen on a GitHub repository:\nNote those type of licensing is more meant for software (such as R packages) rather than analytical scripts. For those scripts, keeping the license minimal such as MIT of 3-Clause BSD is our recommendation.",
    "crumbs": [
      "Preserving things",
      "Licensing"
    ]
  },
  {
    "objectID": "preserve_license.html#data",
    "href": "preserve_license.html#data",
    "title": "Choosing a License",
    "section": "Data",
    "text": "Data\nTechnically, facts are not copyrightable. Only interpretations of facts. However, data licensing falls under the content licensing framework that is more related to copyright. Here is the type of licensing that can be used: https://creativecommons.org/licenses/\nCC0 is recommended for data\nNote that the license type might be dictated by the data repository you choose as most of the data repositories will have one or two licenses to choose from.",
    "crumbs": [
      "Preserving things",
      "Licensing"
    ]
  },
  {
    "objectID": "coding.html",
    "href": "coding.html",
    "title": "Code as a scientific product",
    "section": "",
    "text": "Code is very likely one of the scientific products your Lab is producing. It is thus important to manage, document, and preserve source code as you would any other scientific products. In this session, we will discuss tools and practices that can ease the management of your code and facilitate collaborative software development.",
    "crumbs": [
      "Coding as a Lab",
      "Code as scientific product"
    ]
  },
  {
    "objectID": "coding.html#code-repository",
    "href": "coding.html#code-repository",
    "title": "Code as a scientific product",
    "section": "Code repository",
    "text": "Code repository\nAs data repositories, code repositories are a great way to preserve and share your code (including with your future self!!). One you might have already heard of is GitHub. However, there are other options such as GitLab, Bitbucket, SourceForge, and more.\nIn this session, we will be focusing on using GitHub to collaborate and keep track of the development of our scripts.\n\nQuick intro to Git & GitHub\n\nWhy those are tools you want to use\nGitHub Website interface walk-through\nUsing RStudio\nAt the Command Line\n\nGitHub Organizations\n\nWhy do you want one for your Lab\nSet it up\nManage: teams and settings\n\nCollaborative coding workflows & strategies\n\nPair Programming\nCode Exchange\nBranch and fork workflows\n\nStreamlining documentation with templates\n\nRepositories",
    "crumbs": [
      "Coding as a Lab",
      "Code as scientific product"
    ]
  },
  {
    "objectID": "intro_cli.html",
    "href": "intro_cli.html",
    "title": "Using the Command line Interface",
    "section": "",
    "text": "The CLI provides a direct way to interact with the Operating System, by typing in commands.\n\n\n\nMight be the only interface you have to a High Performance Computer (HPC)\nCommand statements can be reused easily and saved as scripts\nEasier automation and text files manipulation\n\n\n\n\n\nCommand Line Interface (CLI): This is a user interface that lets you interact with a computer. It is a legacy from the early days of computers. Now a days computers have graphical user interfaces instead (MacOSX, Windows, Linux, …)\nTerminal: It is a an application that lets you run a command line interface. It used to be a physical machine connected to a mainframe computer\nShell: It is the program that runs the command line. There are many different shells, the most common (an default on most system) being bash (Bourne Again SHell)\n\n\n\n\n\n\n\nTip\n\n\n\nNot convinced? Check this out: the CLI pitch\n\n\n\n\n\nYou can access the command line directly from RStudio by using the Terminal tab next to your R console.\n\n\n\n\n\n\npwd: Know where you are\nls: List the content of the directory\ncd: Go inside a directory\n\nSome pseudo directory names. Wherever you are:\n\n~ : Home directory\n. : Here (current directory)\n..: Up one level (upper directory)\n\nLet’s put this into action:\n\ngo to my “Home” directory: cd ~\ngo up one directory level: cd ..\nlist the content: ls\nlist the content showing hidden files: ls -a note that -a is referred as an option (modifies the command)\n\nMore files/directories manipulations:\n\nmkdir: Create a directory\ncp: Copy a file\nmv: Move a file it is also how you rename a file!\nrm / rmdir: Remove a file / directory use those carefully, there is no return / Trash!!\n\nNote: typing is not your thing? the &lt;tab&gt; key is your friend! One hit it will auto-complete the file/directory/path name for you. If there are many options, hit it twice to see the options.\n\n\n\nAll files have permissions and ownership.\n\n\n\nFile permissions\n\n\n\nList files showing ownership and permissions: ls -l\n\n\nbrun@taylor:/courses/EDS214$ ls -l\ntotal 16\ndrwxrwxr-x+ 3 brun      esmdomainusers 4096 Aug 20 04:49 data\ndrwxrwxr-x+ 2 katherine esmdomainusers 4096 Aug 18 18:32 example    \n\nYou can change those permissions:\n\nChange permissions: chmod\nChange ownership: chown\n\n\n\n\n\n\n\nTip\n\n\n\nClear contents in terminal window: clear\n\n\n\n\n\n\ncommand [options] [arguments]\n\nwhere command must be an executable file on your PATH * echo $PATH\nand options can usually take two forms * short form: -a * long form: --all\nYou can combine the options:\n\nls -ltrh\n\nWhat do these options do?\n\nman ls\n\n\n\n\n\n\n\nTip\n\n\n\nhit spacebar to get to the next page of the manual hit q to exit the help\n\n\n\n\n\n\nWho else is logged into this machine? who\nWho is logged into “this shell”? whoami\n\n\n\n\n\n&lt;command&gt; -h, &lt;command&gt; --help\nman, info, apropos, whereis\nSearch the web!\n\n\n\n\nShow me my Rmarkdown files!\n\nfind . -iname '*.Rmd'\n\nWhich files are larger than 1GB?\n\nfind . -size +1G\n\nWith more details about the files:\n\nfind . -size +1G -ls\n\n\n\n\n\n\n\nCancel (abort) a command: Ctrl-c Note: very different than Windows!!\nStop (suspend) a command: Ctrl-z\nCtrl-z can be used to suspend, then background a process\n\n\n\n\n\nLike Windows Task Manager, OSX Activity Monitor\ntop, ps, jobs (hit q to get out!)\nkill to delete an unwanted job or process\nForeground and background: &\n\n\n\n\n\nHow much storage is available on this system? df -h\nHow much storage am “I” using overall? du -hs &lt;folder&gt;\nHow much storage am “I” using, by sub directory? du -h &lt;folder&gt;\n\n\n\n\n\nSee your command history: history\nRe-run last command: !! (pronounced “bang-bang”)\nRe-run 32th command: !32\nRe-run 5th from last command: !-5\nRe-run last command that started with ‘c’: !c\n\n\n\n\n\n\nwc count lines, words, and/or characters\ndiff compare two files for differences\nsort sort lines in a file\nuniq report or filter out repeated lines in a file\n\n\n\n\n\n\n\nstdin, stdout, stderr\n\n\n\n$ ls *.png | wc -l\n$ ls *.png | wc -l &gt; pngcount.txt\n$ diff &lt;(sort file1.txt) &lt;(sort file2.txt)\n$ ls foo 2&gt;/dev/null\n\n\nnote use of * as character wildcard for zero or more matches (same in Mac and Windows)\n? matches single character; _ is SQL query equivalent\n\n\n\n\n\n\n\nvim\nemacs\nnano\n\n\n$ nano .bashrc\n\n\n\n\n\nFrom the gitbash (MS Windows) or the terminal (Mac) type:\n\nssh taylor.bren.ucsb.edu\n\nYou will be prompted for your username and password.\n\n\n\naurora_ssh\n\n\nYou can also directly add your username:\n\nssh brun@taylor.bren.ucsb.edu\n\nIn this case, you will be only asked for your password as you already specified which user you want to connect with.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using the command line"
    ]
  },
  {
    "objectID": "intro_cli.html#short-introduction-to-the-command-line-interface-cli",
    "href": "intro_cli.html#short-introduction-to-the-command-line-interface-cli",
    "title": "Using the Command line Interface",
    "section": "",
    "text": "The CLI provides a direct way to interact with the Operating System, by typing in commands.\n\n\n\nMight be the only interface you have to a High Performance Computer (HPC)\nCommand statements can be reused easily and saved as scripts\nEasier automation and text files manipulation\n\n\n\n\n\nCommand Line Interface (CLI): This is a user interface that lets you interact with a computer. It is a legacy from the early days of computers. Now a days computers have graphical user interfaces instead (MacOSX, Windows, Linux, …)\nTerminal: It is a an application that lets you run a command line interface. It used to be a physical machine connected to a mainframe computer\nShell: It is the program that runs the command line. There are many different shells, the most common (an default on most system) being bash (Bourne Again SHell)\n\n\n\n\n\n\n\nTip\n\n\n\nNot convinced? Check this out: the CLI pitch\n\n\n\n\n\nYou can access the command line directly from RStudio by using the Terminal tab next to your R console.\n\n\n\n\n\n\npwd: Know where you are\nls: List the content of the directory\ncd: Go inside a directory\n\nSome pseudo directory names. Wherever you are:\n\n~ : Home directory\n. : Here (current directory)\n..: Up one level (upper directory)\n\nLet’s put this into action:\n\ngo to my “Home” directory: cd ~\ngo up one directory level: cd ..\nlist the content: ls\nlist the content showing hidden files: ls -a note that -a is referred as an option (modifies the command)\n\nMore files/directories manipulations:\n\nmkdir: Create a directory\ncp: Copy a file\nmv: Move a file it is also how you rename a file!\nrm / rmdir: Remove a file / directory use those carefully, there is no return / Trash!!\n\nNote: typing is not your thing? the &lt;tab&gt; key is your friend! One hit it will auto-complete the file/directory/path name for you. If there are many options, hit it twice to see the options.\n\n\n\nAll files have permissions and ownership.\n\n\n\nFile permissions\n\n\n\nList files showing ownership and permissions: ls -l\n\n\nbrun@taylor:/courses/EDS214$ ls -l\ntotal 16\ndrwxrwxr-x+ 3 brun      esmdomainusers 4096 Aug 20 04:49 data\ndrwxrwxr-x+ 2 katherine esmdomainusers 4096 Aug 18 18:32 example    \n\nYou can change those permissions:\n\nChange permissions: chmod\nChange ownership: chown\n\n\n\n\n\n\n\nTip\n\n\n\nClear contents in terminal window: clear\n\n\n\n\n\n\ncommand [options] [arguments]\n\nwhere command must be an executable file on your PATH * echo $PATH\nand options can usually take two forms * short form: -a * long form: --all\nYou can combine the options:\n\nls -ltrh\n\nWhat do these options do?\n\nman ls\n\n\n\n\n\n\n\nTip\n\n\n\nhit spacebar to get to the next page of the manual hit q to exit the help\n\n\n\n\n\n\nWho else is logged into this machine? who\nWho is logged into “this shell”? whoami\n\n\n\n\n\n&lt;command&gt; -h, &lt;command&gt; --help\nman, info, apropos, whereis\nSearch the web!\n\n\n\n\nShow me my Rmarkdown files!\n\nfind . -iname '*.Rmd'\n\nWhich files are larger than 1GB?\n\nfind . -size +1G\n\nWith more details about the files:\n\nfind . -size +1G -ls\n\n\n\n\n\n\n\nCancel (abort) a command: Ctrl-c Note: very different than Windows!!\nStop (suspend) a command: Ctrl-z\nCtrl-z can be used to suspend, then background a process\n\n\n\n\n\nLike Windows Task Manager, OSX Activity Monitor\ntop, ps, jobs (hit q to get out!)\nkill to delete an unwanted job or process\nForeground and background: &\n\n\n\n\n\nHow much storage is available on this system? df -h\nHow much storage am “I” using overall? du -hs &lt;folder&gt;\nHow much storage am “I” using, by sub directory? du -h &lt;folder&gt;\n\n\n\n\n\nSee your command history: history\nRe-run last command: !! (pronounced “bang-bang”)\nRe-run 32th command: !32\nRe-run 5th from last command: !-5\nRe-run last command that started with ‘c’: !c\n\n\n\n\n\n\nwc count lines, words, and/or characters\ndiff compare two files for differences\nsort sort lines in a file\nuniq report or filter out repeated lines in a file\n\n\n\n\n\n\n\nstdin, stdout, stderr\n\n\n\n$ ls *.png | wc -l\n$ ls *.png | wc -l &gt; pngcount.txt\n$ diff &lt;(sort file1.txt) &lt;(sort file2.txt)\n$ ls foo 2&gt;/dev/null\n\n\nnote use of * as character wildcard for zero or more matches (same in Mac and Windows)\n? matches single character; _ is SQL query equivalent\n\n\n\n\n\n\n\nvim\nemacs\nnano\n\n\n$ nano .bashrc\n\n\n\n\n\nFrom the gitbash (MS Windows) or the terminal (Mac) type:\n\nssh taylor.bren.ucsb.edu\n\nYou will be prompted for your username and password.\n\n\n\naurora_ssh\n\n\nYou can also directly add your username:\n\nssh brun@taylor.bren.ucsb.edu\n\nIn this case, you will be only asked for your password as you already specified which user you want to connect with.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using the command line"
    ]
  },
  {
    "objectID": "intro_cli.html#hands-on",
    "href": "intro_cli.html#hands-on",
    "title": "Using the Command line Interface",
    "section": "Hands-on",
    "text": "Hands-on\nLet’s practice our new skills! Click here",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using the command line"
    ]
  },
  {
    "objectID": "intro_cli.html#aknowledgements",
    "href": "intro_cli.html#aknowledgements",
    "title": "Using the Command line Interface",
    "section": "Aknowledgements",
    "text": "Aknowledgements\nThis section adapted materials from NCEAS Open Science for Synthesis (OSS) intensive summer schools and other training. Contributions to this content have been made by Mark Schildhauer, Matt Jones, Jim Regetz and many others; and from EDS-213 10 bash essentials developed by Greg Janée",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using the command line"
    ]
  },
  {
    "objectID": "collab_exchange.html",
    "href": "collab_exchange.html",
    "title": "Code Review Exchange",
    "section": "",
    "text": "Code Exchange is an asynchronous activity that takes place when a teammate is finished working on a script (or a section of it). This teammate will submit a request to another team member to look over the code and provide feedback. It is a great way to:\nThe Submitter should see this activity as a great way to learn from others through constructive feedback… and so should the Reviewer!! This is why we prefer using the term code exchange instead of the usual code review. In some way, since scientists are well used to getting their work reviewed by peers, this process should feel familiar. Generally, when your code reaches a milestone (like finalizing a new analysis or figure), it is a good time to request a code review.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "collab_exchange.html#how-to-conduct-a-code-exchange",
    "href": "collab_exchange.html#how-to-conduct-a-code-exchange",
    "title": "Code Review Exchange",
    "section": "How to conduct a code exchange",
    "text": "How to conduct a code exchange\n\nAsynchronous or synchronous\nThere are different ways to conduct code review. Here are a few examples inspired by Petre and Wilson (2014): se you can also blend the two methods with scheduling a meeting once the Reviewer has done a fist pass at the code and has a first series of questions.\n\nAsynchronous: The submitter uses GitHub or another code repository platform to request a review of their code, assigning a teammate. The teammate will look at the code on their own and use the platform to provide written comments\nSynchronous: Involve meeting (in-person or remotely) to talk over the code details. The Submitter will walk the Reviewer through the code. This can also work as a small team.\n\nOf course, you can also blend the two methods with scheduling a meeting once the Reviewer has done a first pass at the code and has a first series of questions.\nAs you are building your code review skills, we recommend organizing a meeting to walk through the code and have a discussion about the content. It maximizes the learning experience and is also a great team-building exercise. Some research labs even organize lab meetings for code (see here for more)\nSynchronous or not, we recommend leveraging Pull Request (PR), which is a GitHub way to request to merge your changes with the current repository version, to create a written trace of the discussion and comments you will be exchanging through the process. So if six months after the review you wonder why you ended up opting for some of those changes you can refer to it to refresh yourself with the rationale at the time of the review.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "collab_exchange.html#pull-request-pr",
    "href": "collab_exchange.html#pull-request-pr",
    "title": "Code Review Exchange",
    "section": "Pull Request (PR)",
    "text": "Pull Request (PR)\nA big advantage of Pull Request is to document and provide a space to discuss the new code and discuss potential modifications. You can even tag others if you want them to chime in.\nTo be able to create a PR, you need to first either create a branch or a fork, which are two ways to encapsulate your changes while you are working on them. Once you are done you can ask to send back and merge those changes to the current version of the main branch of the repository (for now we will only merge back to main).\n\nHow to prepare your code for review\nFirst and foremost, your code will never be ready for review… because it is the point of having it reviewed :) So make sure you do not wait too long before requesting a code exchange because the more you wait the more complex the request is likely to be. Better request to review a small piece of code, than an entire multi-script analysis at the end of your project. There are also a few things you can check before requesting your code exchange to make sure you use your collaborator’s time wisely. Here is a short checklist to build from:\n\nMake sure you pushed your latest version of the code to GitHub\nMake sure the goal/motivation of your code is clearly stated either in a README or at the beginning of your script\nHighlight or trim any extra code that is not strictly necessary for this specific request or that has already been reviewed. You can also flip this comment and highlight which part of the code should the reviewer focus on\nIf necessary, prepare a few examples of how to use the code (could be a few slides, some documentation, …)\nIf your code uses data, make sure those data sets (or a sample of it) and their metadata are also available to your reviewer\nState the expected output of your code (statistics, graphs, …) sharing your own results; for example, knitting a quarto document or Jupyter notebook Don’t forget this is the code that is reviewed not you!!\n\n\n\nWhat to look for in your review\nSimilarly to a manuscript review, we recommend starting with the big picture first and then looking into the details. If you can not run the code or produce the same results, you should spend a minimum time (20-30min) trying to figure out what and reach out to the Submitter quickly explaining the problem and requesting a code walkthrough.\n\nCan you run the code? If not, look into the usual suspects: Missing libraries, hard-coded paths, or access to data. If nothing obvious comes up, kindly reach out back to the Submitter mentioning you can not run the code and requesting a walkthrough.\nDo you get the expected results / outputs? You should have been provided the expected results by the Submitter. If your results are not the same start to look into why. Again if nothing obvious comes up, kindly reach out back to the Submitter mentioning you can not run the code and requesting a walkthrough.\nIs the code reliable? In other words, do you get the same results every time you run the code? If you have access to several machines (laptop, lab computer, server, …) compare results.\nCode purpose is understandable: Are the goals of the code clearly stated at the beginning of the script? Are inline code comments present to explain decisions? Remember that every analysis is opinionated. Even if you would have written the code differently, it does not mean that is the only way to do it. - However, if you feel strongly about a better way to conduct a specific task, offer your feedback as a suggestion to the Reviewer while offering to further discuss it\nDocumentation: Is there external documentation? If so does it help with understanding both how to use the code but also the methods used? Make sure to check that the methodology described effectively matches the methods the code is using\nVisual aspects: Is the code easy to read? Could it be modularized or simplified? Is the styling of things consistent? Is the naming of things consistent?\n\nRemember to be kind and constructive in your comments. There are a lot of skills at play to develop scientific code and we all have our strengths and weaknesses; however in the end we are all learners. Finally, do not be shy to share when you feel you are not the best person to assess a specific methodology or some part of the code.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "collab_exchange.html#recommended-reading",
    "href": "collab_exchange.html#recommended-reading",
    "title": "Code Review Exchange",
    "section": "Recommended Reading",
    "text": "Recommended Reading\nIvimey-Cook ER, Pick JL, Bairos-Novak KR, Culina A, Gould E, Grainger M, et al. Implementing code review in the scientific workflow: Insights from ecology and evolutionary biology. Journal of Evolutionary Biology. 2023;36: 1347–1356. doi:10.1111/jeb.14230\nPetre, M., Wilson, G., 2014. Code Review For and By Scientists. https://doi.org/10.48550/arXiv.1407.5648\nRokem, A., 2024. Ten simple rules for scientific code review. PLoS Computational Biology 20(9): e1012375. https://doi.org/10.1371/journal.pcbi.1012375\nCode reviews - the lab meeting for code: https://web.archive.org/web/20170701202441/http:/fperez.org/py4science/code_reviews.html\nSmall-Group Code Reviews For Education: https://cacm.acm.org/blogs/blog-cacm/175944-small-group-code-reviews-for-education/fulltext",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "03-handson_github_workflows.html",
    "href": "03-handson_github_workflows.html",
    "title": "GitHub workflows: forks and branches",
    "section": "",
    "text": "Setup\n\nPerson 1 (owner):\n\nCreate a repository using the following these instructions steps 1-6\n\n\n\nAdd Person 2 as collaborator following these instructions\nEdit the README to:\n\nReplace the title (first line starting with #) with something better! Maybe Favorite Desserts\nAdd your name and your favorite dessert below the title: e.g. - Julien: crepes\n\n\n\nknitr::include_graphics(\"img/github-readme_desserts.png\")\n\n\n\n\n\n\n\n\n\n\n\nForks\n\nPerson 2: Create a Fork\n\nAsk your teammate to Slack you the link to the repository\nCreate a Fork by clicking on the Fork button on the top right view of your repository homepage\n\n\n\n\n\n\n\n\n\n\n\nOn your Fork, start editing the README.md\nAdd your name and your favorite dessert below your teammate entry: e.g. - Sophia: chocolate\nAdd a descriptive commit message\n\n\nknitr::include_graphics(\"img/github-commit.png\")\n\n\n\n\n\n\n\n\n\nCommit your changes\n\n\n\n\n\n\n\n\n\n\n\nCreate a pull request to merge those changes to the main repository using these instructions\n\n\n\nPerson 1:\n\nGo to your repository and merge the PR\n\n\n\n\n\nBranches\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\n\nJust drag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file: e.g. Adding dessert csv & hit Commit changes\nYour file has been uploaded. Click on the filename to see it!\n\nYou should have something similar to this repo: https://github.com/brunj7/favorite-desserts/blob/master/favorite_desserts.csv\nNow you want to collaborate more closely and do not wan your teammate to have to create a fork and be able to work directly on your repository\n\nAdd Person 2 as a collaborator following these instructions\n\n\n\nPerson 2: Create a branch\n\nCheck your email or Github Notifications to accept the invitation\nGo to the repository website (link is provided in the invitation)\nCreate a new branch named after your first name\n\n\nknitr::include_graphics(\"img/github-create_branch.png\")\n\n\n\n\n\n\n\n\n\nEdit the csv file directly on GitHub to add your favorite dessert to it\nCreate a Pull Request (PR) to merge you branch back to main\nAssign person 1 as a reviewer (instructions)\n\n\n\nPerson 1: Merge the branch\n\nReview PR\nMerge and close PR",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Hands-on: forks & branches with Github website"
    ]
  },
  {
    "objectID": "preserve_prompts.html",
    "href": "preserve_prompts.html",
    "title": "Preserving your work",
    "section": "",
    "text": "Preserving your work includes developing enough documentation so your future self or another researcher can make sense of your work, enough so that they can at least reproduce your work and reuse it to answer their own research questions. It also includes where to store and share your work in data / code repositories.",
    "crumbs": [
      "Preserving things",
      "What is preservation"
    ]
  },
  {
    "objectID": "preserve_prompts.html#documentation",
    "href": "preserve_prompts.html#documentation",
    "title": "Preserving your work",
    "section": "Documentation",
    "text": "Documentation\nOnly a few people with free time ahead of them will sit wondering about what to do next and think “what if I were to write some documentation!?”. Make it part of your workflow! and do not let it get out of sync too much as you iterate on your analysis.\n\n\n\n\n\nhttps://twitter.com/JenMsft/status/1557218211971489792\n\n\n\n\n\nKnow your audience\nThere are actually various ways to document your work!! Here is a potential framework to help to think about those different types of documentation and their related audiences:\n\n\n\n\n\nsource: https://diataxis.fr/\n\n\n\n\nYour potential audience(s) for your documentation can be a future collaborator, an external researcher with no direct insight into your work, or a potential user of a tool you developed.",
    "crumbs": [
      "Preserving things",
      "What is preservation"
    ]
  },
  {
    "objectID": "preserve_prompts.html#prompts",
    "href": "preserve_prompts.html#prompts",
    "title": "Preserving your work",
    "section": "Prompts",
    "text": "Prompts\n\nWhat are the specific expectations from your discipline in terms of documentation and sharing data? For example, should you also share the raw data along with the analysis results?\nConsidering funding and publisher mandates, as well as disciplinary norms. Do you anticipate / have had any challenges regarding data sharing and preservation?",
    "crumbs": [
      "Preserving things",
      "What is preservation"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About RDS",
    "section": "",
    "text": "Research Data Services (RDS) helps UCSB researchers manage and preserve their research data through:\n\nConsultations\nLong-term engagements\nInstructional workshops\n\nOur team offers support across the research data lifecycle, from pre-project planning to post-project archival, connecting researchers with both locally- and externally-provided curation services. Our goal is to ensure that all research data is well-described, FAIR (Findable, Accessible, Interoperable, Reusable), and sustainably preservable, and that researchers receive scholarly credit for sharing and publishing data.\nContact us if you have any questions: rds@library.ucsb.edu",
    "crumbs": [
      "About us",
      "Research Data Services"
    ]
  },
  {
    "objectID": "preserve_data.html",
    "href": "preserve_data.html",
    "title": "Preserve your data",
    "section": "",
    "text": "As you finalize your projects, often an important task is to archive your data in a publicly available repository (pending sensitivity and by non-disclosure agreement exceptions). There are a few important steps to ensure that your data can be reused by others and thus make your work more reproducible.",
    "crumbs": [
      "Preserving things",
      "Your data"
    ]
  },
  {
    "objectID": "preserve_data.html#what-data-products-to-preserve",
    "href": "preserve_data.html#what-data-products-to-preserve",
    "title": "Preserve your data",
    "section": "What data products to preserve?",
    "text": "What data products to preserve?\nYour general philosophy when preparing the preservation of your scientific products should be: Document what you used (provenance) and preserve what you produced.\nOften the first question that comes to mind when starting to preserve your work is: What should I include in my data archive? Generally speaking, you want to preserve your work. This means capturing the methodology you used, the raw data you collected, any data cleaning you did, and any data and output (figure, report, etc.) you generated. Okay… so you mean everything!? Well, yes and no. Everything relevant to help you come to the findings and conclusions discussed in your project report or any other publications and deliverables. Let’s break this down!\n\nRaw data\nHere are a few questions to ask yourself to determine if you should refer in your documentation to the raw data you used or also include them in your data archive.\n\nThe raw data is already publicly accessible, and the hosting solution (website, FTP server, etc.) seems well maintained (ideally providing a recommended citation)\n\n=&gt; Document the website or process you used to collect the data and when you accessed/downloaded the data you used. Try also to determine if a specific version number is associated with the data you used.*\n\nThe raw data is not publicly accessible\n\nNote that we are not talking about data under a non-disclosure agreement (NDA) here but more about data with an unclear reuse status or obtained by interactions with a person or an institution. For example, if the data you used were sent to you privately, then we recommend that you:\n\ninquire with your person of contact about the status of licensing and if they would be willing to let you share those data publicly. You might face resistance at first, so take the time to explain why you think it is valuable to your work to also share those data sets.\nif, in the end, it is not possible to share the data, please still describe the data in your documentation and list the contact information (person or institution) to inquire about this data set.\n\n\n\nIntermediate data\nThis is data you generated either while cleaning or analyzing the raw data. You should preserve it if:\n\nit was not directly generated by a script (otherwise, preserve the code instead)\nit has reusable value. For example, cleaned-up versions of raw data can be very valuable for others to reuse!\n\n\n\nCode\nScripting your analytical workflow from the raw data to the end products is a great way to make your work more reproducible and more reusable by others. We thus strongly encourage your team to develop code to process and analyze data. Cloud-based code repository services, such as GitHub, GitLab, BitBucket, and more, are a great way to both manage and preserve your code.\nThose services are often well-integrated with data repositories that link your code repository with your data archive. They also offer a way to tag a specific version of your code to ensure it is the exact code you used for a specific analysis.\n\n\nFinal products\nWe recommend including any data set used to produce statistics, figures maps, and other visualizations that were used in your work, in this case, even if generated by scripts.",
    "crumbs": [
      "Preserving things",
      "Your data"
    ]
  },
  {
    "objectID": "preserve_data.html#metadata",
    "href": "preserve_data.html#metadata",
    "title": "Preserve your data",
    "section": "Metadata",
    "text": "Metadata\nMetadata (data about data) is an important part of the data life cycle because it enables data reuse long after the original collection. The goal is to have enough information for the researcher to understand the data, interpret the data, and then re-use the data in another study.\n\n\n\n\n\nmetadata analogy\n\n\n\n\nHere are good questions to answer with your metadata:\n\nWhat was measured?\nWho measured it?\nWhen was it measured?\nWhere was it measured?\nHow was it measured?\nHow is the data structured?\nWhy was the data collected?\nWho should get credit for this data (researcher AND funding agency)?\nHow can this data be reused (licensing)?\n\n\nMetadata standards\nHow do you organize all this information? You could use a free-form format, like a README file or spreadsheet. But there is also a great advantage to using a more standardized way that will make the content not only Human readable but also machine-readable. This will enhance the data discovery as specific information will be potentially tagged or attributed to specific aspects of your data (e.g. spatial or temporal coverage, taxonomy, …).\nThere are a number of environmental metadata standards (think, templates) that you could use, including the Ecological Metadata Language (EML), Geospatial Metadata Standards like ISO 19115 and ISO 19139, the Biological Data Profile (BDP), Dublin Core, Darwin Core, PREMIS, the Metadata Encoding and Transmission Standard (METS), and the list goes on and on.\nSome repositories will have standards baked into their systems, so if you plan to archive and preserve your data in a disciplinary repository with specific metadata requirements it is always important to check what are these in advance. You may need to rework your existing documentation accordingly.",
    "crumbs": [
      "Preserving things",
      "Your data"
    ]
  },
  {
    "objectID": "preserve_data.html#data-provenance-semantics",
    "href": "preserve_data.html#data-provenance-semantics",
    "title": "Preserve your data",
    "section": "Data provenance & semantics",
    "text": "Data provenance & semantics\nData provenance refers to one’s ability to trace the original source of a data set to the raw data that were used as input for the processing/analysis that led to the creation of this data set. It can be done more or less formally and this is an active area of research. Today, we will be focusing on capturing the information about the data you are collecting. Here are a set of good questions to help you in that process:\n\nSource / owner (Person, institution, website, ….)\nWhen was it acquired ?\nBy whom on the WG ?\nWhere is it currently located (Google drive, server, ….) ?\nShort description of the data\nTrack if it is used in your analysis\n\nHere is a template of a data log that could hep to store this information\nAnother important and related aspect and also active field of research is data semantics. Often data sets store complex information and concepts that can be described more or less accurately. Let’s take an example, you have received a csv file storing a table with several variables about a fish stock assessment. One of the variables is named “length”. However, there are many ways to measure the length of a fish. Which one is it?\n\n\n\n\n\n\n\n\n\nData semantics aims at clearly identify those concepts relying on vocabularies and ontologies, such as ENVO in environmental sciences. In addition, it enables the leverage relations between those concepts to help with (data) discovery.",
    "crumbs": [
      "Preserving things",
      "Your data"
    ]
  },
  {
    "objectID": "preserve_data.html#choosing-a-data-repository",
    "href": "preserve_data.html#choosing-a-data-repository",
    "title": "Preserve your data",
    "section": "Choosing a data repository",
    "text": "Choosing a data repository\nWe know what we want to archive, now we need to decide where we want to preserve things!\nUCSB’s institutional data repository Dryad will be your default data repository. However, we encourage you to discuss with your colleagues to determine if other data repositories might suit your targeted audience/community better. If you used some data from a specific data repository, that would be a good sign that it is a potential home for your work as well.\nIf you would like to research on your own which data repository could be best for your project, the Registry of Research Data Repositories is a great resource to do so. You can also search for similar data using data repository aggregators, such as DataONE to find where those data are hosted.\n\nDryad\nDryad is free of use for any UC affiliated researcher. Here is an overview of the process of submitting data to DRYAD:\n\n\n\nDRYAD data submission overview",
    "crumbs": [
      "Preserving things",
      "Your data"
    ]
  },
  {
    "objectID": "git_further_readings.html",
    "href": "git_further_readings.html",
    "title": "Further readings",
    "section": "",
    "text": "Jenny Bryan Happy git with R http://happygitwithr.com/\nIntro to GitHub and using git from RStudio GUI: http://ohi-science.org/data-science-training/collaborating.html\nIntro to git and Github using the command line: https://nceas.github.io/oss-lessons/version-control/1-git-basics.html\nTry git in 15min: https://try.github.io/levels/1/challenges/1\nGit terminology: https://www.atlassian.com/git/glossary/terminology\ngit rebase https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#git-general-introduction",
    "href": "git_further_readings.html#git-general-introduction",
    "title": "Further readings",
    "section": "",
    "text": "Jenny Bryan Happy git with R http://happygitwithr.com/\nIntro to GitHub and using git from RStudio GUI: http://ohi-science.org/data-science-training/collaborating.html\nIntro to git and Github using the command line: https://nceas.github.io/oss-lessons/version-control/1-git-basics.html\nTry git in 15min: https://try.github.io/levels/1/challenges/1\nGit terminology: https://www.atlassian.com/git/glossary/terminology\ngit rebase https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#git-workflows",
    "href": "git_further_readings.html#git-workflows",
    "title": "Further readings",
    "section": "Git workflows",
    "text": "Git workflows\n\nComparing workflow: https://www.atlassian.com/git/tutorials/comparing-workflows\nForking vs branching: https://stackoverflow.com/questions/3611256/forking-vs-branching-in-github\nDevelopment workflow: https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki/Development-workflow-with-Git:-Fork,-Branching,-Commits,-and-Pull-Request",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#branches",
    "href": "git_further_readings.html#branches",
    "title": "Further readings",
    "section": "Branches",
    "text": "Branches\n\nInteractive tutorial to learn more about git branches and more https://learngitbranching.js.org/",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#undoing-things",
    "href": "git_further_readings.html#undoing-things",
    "title": "Further readings",
    "section": "Undoing things",
    "text": "Undoing things\n\nHelp to decide how to undo your problem: http://justinhileman.info/article/git-pretty/git-pretty.png\nUndo almost everything with git https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/\nDifference between git reset soft, mixed and hard https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/\nResetting, Checking Out & Reverting https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_cli.html",
    "href": "git_cli.html",
    "title": "Using git at the command line",
    "section": "",
    "text": "If you are not sure if you have already set your git identity, you can check this running this command:\ngit config --global --list\nIf you identity is not set yet, you need to provide your name and email (we recommend to use the same email as used when setting your GitHub account):\ngit config --global user.name \"your Full Name\"\ngit config --global user.email \"your Email\"\n\n\nCheck that everything is correct:\ngit config --global --list\nModify everything at the same time:\ngit config --global --edit\nSet your text editor:\ngit config --system core.editor nano\nHere nano is used as example; you can choose most of the text editor you might have installed on your computer (atom, sublime, notepad++ …).\nProblem with any of those steps? Check out Jenny Brian Happy git trouble shooting section\n\n\n\n\nNormally if you have already used GitHub tokens your Operating System (Windows, MacOSX, …) should have cached the necessary credentials to log in to your GitHub account (necessary to be able to push (write) content to the remote repository).\n\n\nYou can find the latest guidelines on how to setup your personal GitHub token here\n\nChoose a token name that is related to the machine you are using (not requires, but a good idea :) )\nSet the expiration date to 90 days\nWe recommend to select the following options:\n\nall repo actions\nworkflow\ngist\nall user actions\n\n\nThen click the Generate token button at the bottom of the page.\n\nDO NOT CLOSE the next page as it will be the only time you can see your token.\nCopy your token to your clipboard and then push to GitHub from the command line using git push. When you are prompted for your password, copy your token.\nOnly once it has worked and that your token as been cached by your OS password manager you can close the GitHub webpage displaying your token value.\n\n\n\nAnother option is to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\nSSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\nYou can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\nThe first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it:\nls -al ~/.ssh\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\n\n\nIf SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up.\n\n\n\nls: cannot access '/Users/brunj7/.ssh': No such file or directory\nCreate an SSH key pair\nTo create an SSH key pair Vlad uses this command, where the -t option specifies which type of algorithm to use and -C attaches a comment to the key (here, Vlad’s email):\n$ ssh-keygen -t ed25519 -C \"youremail@provider.org\"\nIf you are using a legacy system that doesn’t support the Ed25519 algorithm, use:\n$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/Users/brunj7/.ssh/id_ed25519):\nWe want to use the default file, so just press Enter.\nCreated directory '/Users/brunj7/.ssh'.\nEnter passphrase (empty for no passphrase):\nNow, it is prompting you for a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no “reset my password” option.\n\n\n\n\n\n\nWarning\n\n\n\nWhen you enter password at the shell, the keystrokes do not produce the usual “dot” showing you that you are typing, but your keystrokes are being registered… so keep typing you password !!\n\n\nEnter same passphrase again:\nAfter entering the same passphrase a second time, we receive the confirmation\nYour identification has been saved in /Users/brunj7/.ssh/id_ed25519\nYour public key has been saved in /Users/brunj7/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o vlad@tran.sylvan.ia\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\nThe “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\nNow that we have generated the SSH keys, we will find the SSH files when we check.\nls -al ~/.ssh\ndrwxr-xr-x 1 brunj7  staff 197121  Oct 23  13:14 ./\ndrwxr-xr-x 1 brunj7  staff 197121  Mar 11  09:21 ../\n-rw------- 1 brunj7  staff    464  Apr 21  2023 id_ed25519\n-rw-r--r-- 1 brunj7  staff    103  Apr 21  2023 id_ed25519.pub",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_cli.html#setup-your-git-profile",
    "href": "git_cli.html#setup-your-git-profile",
    "title": "Using git at the command line",
    "section": "",
    "text": "If you are not sure if you have already set your git identity, you can check this running this command:\ngit config --global --list\nIf you identity is not set yet, you need to provide your name and email (we recommend to use the same email as used when setting your GitHub account):\ngit config --global user.name \"your Full Name\"\ngit config --global user.email \"your Email\"\n\n\nCheck that everything is correct:\ngit config --global --list\nModify everything at the same time:\ngit config --global --edit\nSet your text editor:\ngit config --system core.editor nano\nHere nano is used as example; you can choose most of the text editor you might have installed on your computer (atom, sublime, notepad++ …).\nProblem with any of those steps? Check out Jenny Brian Happy git trouble shooting section\n\n\n\n\nNormally if you have already used GitHub tokens your Operating System (Windows, MacOSX, …) should have cached the necessary credentials to log in to your GitHub account (necessary to be able to push (write) content to the remote repository).\n\n\nYou can find the latest guidelines on how to setup your personal GitHub token here\n\nChoose a token name that is related to the machine you are using (not requires, but a good idea :) )\nSet the expiration date to 90 days\nWe recommend to select the following options:\n\nall repo actions\nworkflow\ngist\nall user actions\n\n\nThen click the Generate token button at the bottom of the page.\n\nDO NOT CLOSE the next page as it will be the only time you can see your token.\nCopy your token to your clipboard and then push to GitHub from the command line using git push. When you are prompted for your password, copy your token.\nOnly once it has worked and that your token as been cached by your OS password manager you can close the GitHub webpage displaying your token value.\n\n\n\nAnother option is to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\nSSH uses what is called a key pair. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private. Very descriptive names.\nYou can think of the public key as a padlock, and only you have the key (the private key) to open it. You use the public key where you want a secure method of communication, such as your GitHub account. You give this padlock, or public key, to GitHub and say “lock the communications to my account with this so that only computers that have my private key can unlock communications and send git commands as my GitHub account.”\nThe first thing we are going to do is check if this has already been done on the computer you’re on. Because generally speaking, this setup only needs to happen once and then you can forget about it:\nls -al ~/.ssh\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\n\n\nIf SSH has been set up on the computer you’re using, the public and private key pairs will be listed. The file names are either id_ed25519/id_ed25519.pub or id_rsa/id_rsa.pub depending on how the key pairs were set up.\n\n\n\nls: cannot access '/Users/brunj7/.ssh': No such file or directory\nCreate an SSH key pair\nTo create an SSH key pair Vlad uses this command, where the -t option specifies which type of algorithm to use and -C attaches a comment to the key (here, Vlad’s email):\n$ ssh-keygen -t ed25519 -C \"youremail@provider.org\"\nIf you are using a legacy system that doesn’t support the Ed25519 algorithm, use:\n$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/Users/brunj7/.ssh/id_ed25519):\nWe want to use the default file, so just press Enter.\nCreated directory '/Users/brunj7/.ssh'.\nEnter passphrase (empty for no passphrase):\nNow, it is prompting you for a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no “reset my password” option.\n\n\n\n\n\n\nWarning\n\n\n\nWhen you enter password at the shell, the keystrokes do not produce the usual “dot” showing you that you are typing, but your keystrokes are being registered… so keep typing you password !!\n\n\nEnter same passphrase again:\nAfter entering the same passphrase a second time, we receive the confirmation\nYour identification has been saved in /Users/brunj7/.ssh/id_ed25519\nYour public key has been saved in /Users/brunj7/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o vlad@tran.sylvan.ia\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\nThe “identification” is actually the private key. You should never share it. The public key is appropriately named. The “key fingerprint” is a shorter version of a public key.\nNow that we have generated the SSH keys, we will find the SSH files when we check.\nls -al ~/.ssh\ndrwxr-xr-x 1 brunj7  staff 197121  Oct 23  13:14 ./\ndrwxr-xr-x 1 brunj7  staff 197121  Mar 11  09:21 ../\n-rw------- 1 brunj7  staff    464  Apr 21  2023 id_ed25519\n-rw-r--r-- 1 brunj7  staff    103  Apr 21  2023 id_ed25519.pub",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_cli.html#clone-a-repository",
    "href": "git_cli.html#clone-a-repository",
    "title": "Using git at the command line",
    "section": "Clone a repository",
    "text": "Clone a repository\n\n\n\n\n\n\nTip\n\n\n\nIf you not have yet your favorite-desserts GitHub repository, please follow those steps\n\n\nNavigate to the folder (e.g cd ~/Documents) where you want to save your repository and run the following command:\ngit clone https://github.com/brunj7/favorite-desserts.git\nYou should have a new folder on your local machine named favorite-desserts after your repository :\nls\nGo inside the repository:\ncd favorite-desserts\nls -al\nThis should return the exact same content that is currently on GitHub!",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_cli.html#tracking-your-work",
    "href": "git_cli.html#tracking-your-work",
    "title": "Using git at the command line",
    "section": "Tracking your work",
    "text": "Tracking your work\nLet’s create a text file called index.md and add it to our repository. The file will later be converted into a webpage by GitHub pages. We’ll write the file using a syntax called Markdown, which is why we use the .md extensions.\n\n\n\n\n\n\nNote\n\n\n\nWe’ll use nano to edit the file; you can use whatever editor you like. In particular, this does not have to be the core.editor you set globally earlier. But remember, the bash command to create or edit a new file will depend on the editor you choose (it might not be nano). For a refresher on text editors, check out “Which Editor?” in The Unix Shell lesson.\n\n\nnano index.md\nType the text below, replacing the names with people you know:\n## Listing of my favorite desserts\n\n- Julien, crepes\n\nExit nano and save your changes.\nCheck it worked:\n$ cat index.md\nYou should see the content you just typed!\nIf we check the status of our project again, Git tells us that it’s noticed the new file:\n$ git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    index.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nThe “untracked files” message means that there’s a file in the directory that Git isn’t keeping track of. We can tell Git to track a file using git add:\n$ git add index.md\nand then check that the right thing happened:\n$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n    new file:   index.md\n\nGit now knows that it’s supposed to keep track of index.md, but it hasn’t recorded these changes as a commit yet. To get it to do that, we need to run one more command:\n$ git commit -m \"start new webpage\"\n[main (root-commit) f22b25e] Start new webpage\n 1 file changed, 1 insertion(+)\n create mode 100644 index.md\nWhen we run git commit, Git takes everything we have told it to save by using git add and stores a copy permanently inside the special .git directory. This permanent copy is called a commit (revision) and its short identifier is f22b25e. Your commit may have another identifier.\nWe use the -m flag (for “message”) to record a short, descriptive, and specific comment that will help us remember later on what we did and why. If we just run git commit without the -m option, Git will launch nano (or whatever other editor we configured as core.editor) so that we can write a longer message.\nGood commit messages start with a brief (&lt;50 characters) statement about the changes made in the commit. Generally, the message should complete the sentence “If applied, this commit will” . If you want to go into more detail, add a blank line between the summary line and your additional notes. Use this additional space to explain why you made changes and/or what their impact will be.\nIf we run git status now:\n$ git status\nOn branch main\nnothing to commit, working tree clean\nit tells us everything is up to date. If we want to know what we’ve done recently, we can ask Git to show us the project’s history using git log:\n$ git log\ncommit f22b25e3233b4645dabd0d81e651fe074bd8e73b\nAuthor: ...\nDate:   Thu Aug 22 09:51:46 2013 -0400\n\n    start new webpage\ngit log lists all commits made to a repository in reverse chronological order. The listing for each commit includes the commit’s full identifier (which starts with the same characters as the short identifier printed by the git commit command earlier), the commit’s author, when it was created, and the log message Git was given when the commit was created.\n\n\n\n\n\n\nWhere Are My Changes?\n\n\n\nIf we run ls at this point, we will still see just one file called index.md. That’s because Git saves information about files’ history in the special .git directory mentioned earlier so that our filesystem doesn’t become cluttered (and so that we can’t accidentally edit or delete an old version).\n\n\nLet’s adds more information to the file. (Again, we’ll edit with nano and then cat the file to show its contents; you may use a different editor, and don’t need to cat.)\n$ nano index.md\n## Listing of my favorite desserts\n\n- Julien, crepes\n- Sophia, chocolate\n\nWhen we run git status now, it tells us that a file it already knows about has been modified:\n$ git status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   index.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nThe last line is the key phrase: “no changes added to commit”.\nWe have changed this file, but we haven’t told Git we will want to save those changes (which we do with git add) nor have we saved them (which we do with git commit). So let’s do that now. It is good practice to always review our changes before saving them. We do this using git diff.\nThis shows us the differences between the current state of the file and the most recently saved version:\n$ git diff\ndiff --git a/index.md b/index.md\nindex 7d781a7..bbb33fe 100644\n--- a/index.md\n+++ b/index.md\n@@ -1 +1,3 @@\n## Listing of my favorite desserts\n\n- Julien, crepes\n+ - Sophia, chocolate\n\nThe output is cryptic because it is actually a series of commands for tools like editors and patch telling them how to reconstruct one file given the other. If we break it down into pieces:\n\nThe first line tells us that Git is producing output similar to the Unix diff command comparing the old and new versions of the file.\nThe second line tells exactly which versions of the file Git is comparing; 7d781a7 and bbb33fe are unique computer-generated labels for those versions.\nThe third and fourth lines once again show the name of the file being changed.\nThe remaining lines are the most interesting, they show us the actual differences and the lines on which they occur. In particular, the + marker in the first column shows where we added a line.\n\nAfter reviewing our change, it’s time to commit it:\n$ git commit -m \"add Sophia\"\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   index.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nWhoops: Git won’t commit because we didn’t use git add first. Let’s fix that:\n$ git add index.md\n$ git commit -m \"add Sophia\"\n[main 019f377] add Sophia\n 1 file changed, 1 insertions(+)\n\n\n\n\n\n\nNote\n\n\n\nGit insists that we add files to the set we want to commit before actually committing anything. This allows us to commit our changes in stages and capture changes in logical portions rather than only large batches. For example, suppose we’re adding a few citations to relevant research to our thesis. We might want to commit those additions, and the corresponding bibliography entries, but not commit some of our work drafting the conclusion (which we haven’t finished yet).\nTo allow for this, Git has a special staging area where it keeps track of things that have been added to the current changeset but not yet committed.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_cli.html#exploring-git-history",
    "href": "git_cli.html#exploring-git-history",
    "title": "Using git at the command line",
    "section": "Exploring git history",
    "text": "Exploring git history\nYou can look at the history of what we’ve done so far:\n$ git log\nIt should look something like this:\ncommit d11d7e52ab98d3d4c18cde4c4a0bbeea3fe40983 (HEAD -&gt; main)\nAuthor: ...\nDate:   Thu Oct 19 12:07:51 2023 -0400\n\n    add Sophia\n\ncommit 019f37773f9f18b77f508990df65e56a34df45de\nAuthor: ...\nDate:   Thu Oct 19 12:03:04 2023 -0400\n\n    start new webpage\n\ncommit 8defaab26aa641a4233896ec68e603c541aa77b4\nAuthor: ...\nDate:   Thu Oct 19 12:01:17 2023 -0400\n\n    intial commit\n\nPaging the Log\nWhen the output of git log is too long to fit in your screen, git uses a program to split it into pages of the size of your screen. When this “pager” is called, you will notice that the last line in your screen is a :, instead of your usual prompt.\n\nTo get out of the pager, press Q.\nTo move to the next page, press Spacebar.\nTo search for some_word in all pages, press / and type some_word. Navigate through matches pressing N.\n\nTo avoid having git log cover your entire terminal screen, you can limit the number of commits that Git lists by using -N, where N is the number of commits that you want to view. For example, if you only want information from the last commit you can use:\n$ git log -1\ncommit d11d7e52ab98d3d4c18cde4c4a0bbeea3fe40983 (HEAD -&gt; main)\nAuthor: ...\nDate:   Thu Oct 19 12:07:51 2023 -0400\n\n    add Sophia\nYou can also reduce the quantity of information using the --oneline option:\n$ git log --oneline\nd11d7e5 (HEAD -&gt; main) add Sophia\n019f377 start new webpage\n8defaab initial commit\nYou can also combine the --oneline option with others. One useful combination adds --graph to display the commit history as a text-based graph and to indicate which commits are associated with the current HEAD, the current branch main, or [other Git references][git-references]:\n$ git log --oneline --graph\n* d11d7e5 (HEAD -&gt; main) add Sophia\n* 019f377 start new webpage\n* 8defaab initial commit",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_cli.html#sending-changes-back-to-github",
    "href": "git_cli.html#sending-changes-back-to-github",
    "title": "Using git at the command line",
    "section": "Sending changes back to GitHub",
    "text": "Sending changes back to GitHub\nNow that we have created these two commits on our local machine, our local version of the repository is different from the version on GitHub. You can see this when running git status at the beginning of the message you should have “Your branch is ahead of ‘origin/master’ by two commits”. This can be translated as you have two additional commits on your local machine that you never shared back to the remote repository on GitHub. Open your favorite web browser and look at the content of your repository on GitHub. You will see there is no index.md file on GitHub.\nThere are two git commands to exchange between local and remote versions of a repository:\n\npull: git will get the latest remote (GitHub in our case) version and try to merge it with your local version\npush: git will send your local version to the remote version of the repository\n\nBefore sending your local version to the remote, you should always get the latest remote version first. In other words, you should pull first and push second. This is the way git protects the remote version against incompatibilities with the local version. You always deal with potential problems on your local machine. Therefore your sequence will always be:\n\npull\npush\n\nLet’s do it:\ngit pull\nNormally nothing should have changed on the remote\nNow we can push our changes to GitHub:\ngit push\nRefresh the repository webpage, you should now see the index.md file!",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_cli.html#aknowledgements",
    "href": "git_cli.html#aknowledgements",
    "title": "Using git at the command line",
    "section": "Aknowledgements",
    "text": "Aknowledgements\nThis section is adapted from Seth Erickson’s version of the Software Carpentry introduction to git",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using git at the command line"
    ]
  },
  {
    "objectID": "git_rstudio.html",
    "href": "git_rstudio.html",
    "title": "Using git and GitHub with RStudio",
    "section": "",
    "text": "This session will cover:",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#installing-git",
    "href": "git_rstudio.html#installing-git",
    "title": "Using git and GitHub with RStudio",
    "section": "Installing git",
    "text": "Installing git\nYou can download a copy of git here: https://git-scm.com/downloads and follow the instructions according to your Operating System.\n\nWindows\nYou can keep the options to default during the installation, until you reach Configuring the terminal emulator to use with Git Bash -&gt; be sure Use MinTTY is selected. This will install both git and a set of useful command-line tools using a trimmed down Bash shell.\n\n\nMac OSX\nDepending on the version, you might have to run a few commands from the terminal. Please refer to the README.txt that comes with the download regarding the exact steps to follow.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#setting-up-your-git-identity",
    "href": "git_rstudio.html#setting-up-your-git-identity",
    "title": "Using git and GitHub with RStudio",
    "section": "Setting up your git identity",
    "text": "Setting up your git identity\nBefore you start using git on any computer, you will have to set your identity on your system, as every snapshot of files is associated with the user who implemented the modifications to the file(s).\nOpen the Terminal or git bash and then type the following commands.\n\nSetup your profile\n\nAt the commande line\nIf you are not sure if you have already set your git identity you can check this running this command:\n\ngit config --global --list\n\nIf you identity is not set yet, you need to provide your name and email (we recommend to use the same email as used when setting your GitHub account):\n\ngit config --global user.name \"your Full Name\"\ngit config --global user.email \"your Email\"\n\n\nOptional\nCheck that everything is correct:\n\ngit config --global --list\n\nModify everything at the same time:\n\ngit config --global --edit\n\nSet your text editor:\n\ngit config --system core.editor nano\n\nHere nano is used as example; you can choose most of the text editor you might have installed on your computer (atom, sublime, notepad++ …).\nProblem with any of those steps? Check out Jenny Brian Happy git trouble shooting section\n\n\n\nUsing R\nIf you are an R user, the usethis package is your friend!! You can use this package to check and set up your git identity.\nCheck if you identity is set up:\n\n# install.packages(\"usethis\")\nusethis::git_sitrep()\n\nIf you git identity is not yet set, you should see something like this:\n\nYou can set your git user name and email as follow:\n\nusethis::use_git_config(user.name = \"Julien Brun\", user.email = \"julien.brun@ucsb.edu\")",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#linking-git-and-rstudio",
    "href": "git_rstudio.html#linking-git-and-rstudio",
    "title": "Using git and GitHub with RStudio",
    "section": "Linking git and RStudio",
    "text": "Linking git and RStudio\nIn most cases, RStudio should automatically detect git when it is installed on your computer. The best way to check this is to go to the Tools menu -&gt; Global Options and click on git/SVN\nIf git is properly set up, the window should look like this:\n\nClick OK.\nNote: if git was not enabled, you might be asked to restart RStudio to enable it.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#setting-up-your-github-personal-access-token-pat",
    "href": "git_rstudio.html#setting-up-your-github-personal-access-token-pat",
    "title": "Using git and GitHub with RStudio",
    "section": "Setting up your GitHub Personal Access Token (PAT)",
    "text": "Setting up your GitHub Personal Access Token (PAT)\nAlmost there! The last setup step we need to do is taking care of our authentication with GitHub, so we can download and upload changes to GitHub.\n\nusethis::create_github_token()\n\nThis will open your web browser and send you to a page on GitHub (you might be asked to log in your account). Most of the options have already been set for us, we only need to update:\n\nthe Note field by describing what is the token for. We recommend a combination describing the computer it is use on and what it is going to be use for.\nExpiration to 90 days. Note that GitHub will send you an email when it’s time to renew your token that is about to expire. It is easier to not let the token expire, otherwise you will have to regenerate a new one and do all the setup again.\n\n You can leave all the other options as selected. Click on Generate token green button at the bottom of the page.\nYou should be redirected to a new page where you can see your token. This is the only time you will be able to see it, so do not close this page before you are done with the setup!. Copy your PAT to your clipboard. Back to RStudio, run the following command:\n\ngitcreds::gitcreds_set()\n\nThis will prompt you to paste the PAT you just copied from GitHub. Paste your PAT and hit Enter. You you should see a few message letting you know that the token has been setup.\nCongratulations, you are all done with setting up your computer 🎉 It is a one time job, but note that if you use several computers/servers, you will have to do those steps again on each machine.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#basic-workflow-overview",
    "href": "git_rstudio.html#basic-workflow-overview",
    "title": "Using git and GitHub with RStudio",
    "section": "Basic Workflow Overview",
    "text": "Basic Workflow Overview\n\n\nYou modify files in your working directory and save them as usual\nYou add snapshots of your changed files to your staging area\nYou do a commit, which takes the files as they are in the staging area and permanently stores them as snapshots to your Git directory.\n\nWe can make an analogy with taking a family picture, where each family member would represent a file.\n\nAdding files (to the staging area), is like deciding which family member(s) are going to be on your next picture\nCommitting is like taking the picture\n\nThis 2-step process enables you to flexibly group files into a specific commit.\nThese steps are repeated for every version you want to keep (every time you would like to use save as). Every time you commit, you create a new snapshot, and you add the new version of the file to the git database while keeping all the previous versions in the database. It creates a history of the content of your repository that is like a graph that you can navigate:",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#using-git-from-rstudio",
    "href": "git_rstudio.html#using-git-from-rstudio",
    "title": "Using git and GitHub with RStudio",
    "section": "Using git from Rstudio",
    "text": "Using git from Rstudio\n\nTracking changes\nRStudio provides a great interface to git helping you navigate the git workflow and getting information about the state of your repository through nice icons and visualizations of the information.\nIf you click on the Git tab in your RStudio upper-right panel, you should see the following information\n\n\n\n\n\n\n\n\n\nThe RStudio Git pane lists every file that’s been added, modified or deleted. The icon describes the change:\n\n\n\n\n\nfrom R packages, H. Wickham\n\n\n\n\nIn our case, it means that:\n\nthe .gitignorefile has been modified since the last commit\nthe .Rproj file has never been tracked by git (remember RStudio just created this project file for us)\n\nNote also that the README.md file is not listed, but it exists (see Filespane). It is because files with no modifications since the last commit are not listed.\nGitHub has created the .gitignore file for us and we have not modified it since. So why is it listed as modified? We can check this by clicking on the Diff button (upper-left on the Git pane).\n\n\n\n\n\n\n\n\n\nWe can see that a new line (in green) has been added at the end of the .gitignore file. In fact, RStudio did that when creating the project to make sure that some temporary files were not tracked by git.\nLet us improve the content of the README.md file as below to make it more descriptive.\n\n\n\n\n\n\n\n\n\nAs soon as you save your changes, you should see the README.md file listed as modified in the git pane.\n\n\n\n\n\n\n\n\n\nLet us look at the diff of the README.md file. As you can see, the original lines are in red, in other words for git those lines have been deleted. The new lines that we just typed are in green, which indicates that these lines have been added for git. Note the line numbers in the left margin that help you to track which lines have been removed and added.\n\n\n\n\n\n\n\n\n\n\n\nKeeping Changes as Snapshots\nNow we would like to save a snapshot of this version of the README.md file. Here are the steps we will need to do:\n\nAdd the file to the next commit by checking the box in front of the file name in the git pane.\nNote that the icon M will move to the left to show you that this file is now staged to be part of the next commit\nCommit:\n\nClick the Commit button at the top of the git pane\nWrite a short but descriptive commit message in the new window\nClick on the the Commit button to save this version of the file in the git database\nClose the windows to get back to the main RStudio window\n\n\n\n\n\n\n\n\n\n\n\nOnce done, add both the .gitignore and the myfirst-repo.Rproj and commit those files together.\n Note that the icons at the top of the git pane have been organized in sequence from left to right to match the git workflow.\n\n\nGood Commit Message Tips\nClearly, good documentation of what you’ve done is critical to making the version history of your repository meaningful and helpful. It is tempting to skip the commit message altogether, or to add some simple message like ‘Updates’. It is better to use messages that will be helpful to your future self in deducing not just what you did, but why you did it. Also, commit messages are best understood if they follow the active verb convention. For example, you can see that my commit messages all started with a past tense verb, and then explained what was changed.\nWhile some of the changes we illustrated here were simple and easily explained in a short phrase, for more complex changes, it is best to provide a more complete message. The convention, however, is to always have a short, terse first sentence, followed by a more verbose explanation of the details and rationale for the change. This keeps the high level details readable in the version log. I can not count the number of times I have looked at the commit log from 2, 3, or 10 years prior and been so grateful for the diligence of my past self and collaborators.\n\n\n\n\n\nfrom xkcd comics",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#looking-at-the-repository-history",
    "href": "git_rstudio.html#looking-at-the-repository-history",
    "title": "Using git and GitHub with RStudio",
    "section": "Looking at the Repository History",
    "text": "Looking at the Repository History\nWe have done 2 new commits at this point. Let us look at the commit timeline we have created so far. You can click on the Clock icon at the top to visualize the history.\n\n\n\n\n\n\n\n\n\nYou can see that there has been 3 commits so far. The first one was done by GitHub when we created the repository and the 2 commits we just did. The most recent commit is at the top.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#sending-changes-back-to-github",
    "href": "git_rstudio.html#sending-changes-back-to-github",
    "title": "Using git and GitHub with RStudio",
    "section": "Sending changes back to GitHub",
    "text": "Sending changes back to GitHub\nNow that we have created these two commits on our local machine, our local version of the repository is different from the version on GitHub. RStudio communicate this information to you. If you look below the icons on the git pane, you will see the warning message: “Your branch is ahead of ‘origin/master’ by two commits”. This can be translated as you have two additional commits on your local machine that you never shared back to the remote repository on GitHub. Open your favorite web browser and look at the content of your repository on GitHub. You will see the old version of the README.md and .gitignore file and no trace of the .Rproj file.\n\n\n\n\n\n\n\n\n\nThere are two git commands to exchange between local and remote versions of a repository:\n\npull: git will get the latest remote version and try to merge it with your local version\npush: git will send your local version to the remote version of the repository (in our case GitHub)\n\nBefore sending your local version to the remote, you should always get the latest remote version first. In other words, you should pull first and push second. This is the way git protects the remote version against incompatibilities with the local version. You always deal with potential problems on your local machine. Therefore your sequence will always be:\n\npull\npush\n\nRStudio has icons for that on top of the git pane, with the blue arrow down being for pull and the green arrow up being for push. Remember the icons are organized in sequence!\nLet us do the pull and push to synchronize the remote repositories. We have now synchronized the local (our computer) and remote (on GitHub) versions of our repository.\n\n\n\n\n\n\n\n\n\nYou can now look at the page of your repository on GitHub, you should see 3 files with the exact same version that you have on your local!\n\n\n\n\n\n\nStage versus Commit\n\n\n\nThe functional difference between “staging” a file and “committing” one can be a little tough to grasp at first so let’s explore that briefly here. We can make an analogy with taking a family picture, where each family member would represent a file.\n\nStaging files is like deciding which family member(s) are going to be in your next picture\nCommitting is like taking the picture\n\nThis 2-step process enables you to flexibly group files into a specific commit. Those groupings can be helpful to you later if you’re trying to find what you changed for a specific task (because those changes likely are all in the same commit).",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Designing a Reproducible and Collaborative Lab (RCL)",
    "section": "",
    "text": "The Designing a Reproducible and Collaborative Lab (RCL) Program, currently piloted by the Research Data Services (RDS) department at the UCSB Library, combines group workshops, self-paced learning, and personalized coaching sessions for Faculty and their Team(s) on the following topics:\n\nTopics\n\nCoding as a lab\nManaging your lab data\nAutomating your analytical workflows\nDocumenting & preserving things to make them reusable\n\n\n\nFormat\n\nScheduled at your convenience\n4 workshops (2-3h) as a primer on a specific topic\nPersonalized coaching sessions focused on lab-specific needs\n\n\n\nOutcomes\n\nMore reproducible management of your lab’s scientific products (data, code, and more!)\nBetter analytical strategies for collaboration safety nets for your research lab content\nMore efficient reuse of your work\nStreamlined on- and off-boarding of collaborators\n\n\n\nLearning Opportunities\n\nLeverage GitHub to manage and collaborate on your lab’s code\nDevelop strategies to centralize and manage your lab’s data\nSet up templates and guidelines on how to document your lab research and improve its reusability\nEstablish lab operating procedures and documentation standards\nProtect your lab’s scientific products against loss through backup and computing resources strategies\n\n\n\nWant to know more?\nIf you are interested in this program, please see the about page to connect with us.\n\n\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{brun2025,\n  author = {Brun, Julien and Curty, Renata and Janée, Greg},\n  title = {Designing a {Reproducible} and {Collaborative} {Lab} {(RCL)}},\n  date = {2025-03-31},\n  url = {https://ucsb-library-research-data-services.github.io/reproducible-lab/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBrun, Julien, Renata Curty, and Greg Janée. 2025. “Designing a\nReproducible and Collaborative Lab (RCL).” March 31, 2025. https://ucsb-library-research-data-services.github.io/reproducible-lab/.",
    "crumbs": [
      "About RCL"
    ]
  },
  {
    "objectID": "datamgmt_plan.html",
    "href": "datamgmt_plan.html",
    "title": "Data Management Plan (DMP)",
    "section": "",
    "text": "In a nutshell, your goal is to organize your research lab in a way that will let you document and preserve your scientific products - including raw and derived data when possible. When delivering a project to a funder, it is important to ensure the funder can understand and reuse the products (code, data, apps) you have developed. For those reasons, more and more funders require a data management plan as part of their proposal submission process; therefore, it is a great skill to develop.\nHaving a plan to manage your data will save you from some potential painful hiccups and time as you progress through your project data life cycle. In other words, it is time well spent to develop your data management plan, and the earlier in your project, the better you have a good sense of how you will manage your data. The discussion with your project team about what should be included in the plan is as important as the plan itself since the questions you will have to answer will help you think more about your data (e.g., type, size, processing methods, etc.) and assign roles and responsibilities among project members.\nOnce your lab data are well managed, it becomes easier to archive and share relevant data in a publicly accessible data repository such as Dryad as your projects are completed or important milestones are achieved. For your work to generate a reproducible data archive, metadata and documentation must also be provided, as well as the scripts you have developed for your analysis. Here is a good example of a well-documented data archive: https://doi.org/10.25349/D9JK6N\nBefore writing your plan, we recommend you get familiar with the FAIR and CARE principles to guide your process.\nThose two principles should be the overarching guidelines that will guide the development of your data management plan.",
    "crumbs": [
      "Managing your Lab data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#developing-your-lab-data-management-plan-dmp",
    "href": "datamgmt_plan.html#developing-your-lab-data-management-plan-dmp",
    "title": "Data Management Plan (DMP)",
    "section": "Developing your Lab Data Management Plan (DMP)",
    "text": "Developing your Lab Data Management Plan (DMP)\nYou might already have experience with writing project specific data management plans as they are often required in proposals. The process to develop your lab’s data management plan is very similar, but will be more focused on developing general guidelines for your lab that can be adapted for project specific needs. We recommend using the FAIR & CARE principles as guidance to maximize the reusability of your data by you, your collaborators, other researchers, and futureself. Your plan should ensure that detailed documentation adopting existing standards is developed during the entire duration of your project (don’t wait until the very end!!) and that this documentation is archived along with your data and code in a publicly accessible data repository will set you up for success.\n\n\n\nsource: https://www.library.ucsb.edu/sites/default/files/dls-n04-2021-fair-navy.pdf\n\n\nBelow is a set of questions that will help your team to develop your guidelines about the data and resources you will need along projects’ data lifecycle in your research lab.\n\nDescribing the research data generated by your lab: Provide a description of the data the group will collect or re-use, including the file types, data set size, the number of expected files or sets, content, and source of the data (creator and method of collection).\n\nWhat data are needed?\nAre such data available?\nWhen and how will the data be acquired?\n\nData formats:\n\nAre there any standard formats in the specific research field for managing or disseminating the data sets that have been identified (e.g., XML, ASCII, CSV, .shp, .gdb, GeoTIFF)?\nWho from the group will have responsibility for ensuring that data standards are properly applied, and data are properly formatted?\n\nMetadata: Metadata is documentation that helps make data sets reusable. Think about what details someone would need in order to be able to understand and use these files. For example, perhaps a readme.txt file is necessary to explain variables, the structure of the files, etc. In addition, it is recommended to leverage metadata disciplinary standards, including ontologies and vocabularies. Here is a good resource for metadata standards in environmental sciences. When applicable, also describe other scientific products - models, scripts, and/or workflows - your group will be producing using README files and documenting your code.\nIntellectual property and re-use: If data were collected from the client organization, does the group have the right to redistribute it? If so, are there any restrictions on redistribution? If the group created its data files, would it assign a Creative Commons license to its data?\nData sharing and preservation: The data may have significant value to other researchers beyond this project, and sharing this data can be a valuable contribution to your field. Specify the extent to which data can be reused, including any access limitations. List any proprietary software that might be needed to read the files. If some data is not shareable due to confidentiality, non-disclosure agreements (NDA), or disclosure risk, state such limitations and the rationale behind them. Note that not being allow to share your data does not mean you can not document!! Not all data needs to be saved. Here are some questions to ask yourselves:\n\nIf another researcher wanted to replicate the group’s work or re-use the group’s data, what data and documentation would be required for them to do so?\n\nWhere will the data and metadata be stored after the project is completed?\nIs there a subject-specific and/or open-access repository that is appropriate for the data?\n\n\nOne advantage to depositing your data in a data repository is that you can get a DOI that lets you easily share and cite your data. Most of the data repositories also track views, downloads, and citations for your data archive, which can be used as a metric or a proxy for research impact.",
    "crumbs": [
      "Managing your Lab data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#using-your-data-management-plan",
    "href": "datamgmt_plan.html#using-your-data-management-plan",
    "title": "Data Management Plan (DMP)",
    "section": "Using your Data Management Plan",
    "text": "Using your Data Management Plan\nOk, you have a plan, now what!? A data management plan should be seen as a living document that you update as your projects develop and data needs evolve. We thus recommend sharing this plan with all your team members and external partners when relevant. You can also encourage contribution from your lab members by choosing a file format that can be collectively edited and provide some versioning/track changes feature, such as Google Docs or other cloud-based storage and documents.",
    "crumbs": [
      "Managing your Lab data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#further-reading-recommendations",
    "href": "datamgmt_plan.html#further-reading-recommendations",
    "title": "Data Management Plan (DMP)",
    "section": "Further Reading Recommendations",
    "text": "Further Reading Recommendations\n\nGood overview of Data management concepts: Arteaga Cuevas, Maria; Taylor, Shawna; and Narlock, Mikala. (2023). Introduction to Research Data Management for Researchers. Data Curation Network Primer for Researchers on how to Manage Data\nGood overview of the data lifecycle, including itemized checklist: https://osf.io/d8fqh",
    "crumbs": [
      "Managing your Lab data",
      "Plan"
    ]
  },
  {
    "objectID": "collab_pairprog.html",
    "href": "collab_pairprog.html",
    "title": "Pair Programming",
    "section": "",
    "text": "Pair programming is a synchronous team activity, where several programmers get to work together on the same piece of code. This is a great way to gain a better sense of what coding style people are using and better understand their way of solving challenges. It is also a great way to learn from each other. Generally, there is one Driver who is the person typing on the computer. The other role is called Navigator(s). The Navigator does not write code and focuses on finding solutions to the problem. Their use of computers should be limited to searching online for solutions.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "collab_pairprog.html#basic-principles-practices",
    "href": "collab_pairprog.html#basic-principles-practices",
    "title": "Pair Programming",
    "section": "Basic principles & practices",
    "text": "Basic principles & practices\nAdapted from Woody Zuill https://www.agileconnection.com/article/getting-started-mob-programming\n\nTreat each other with kindness, consideration, and respect - makes group work more fun and sustainable\nDriver/navigator pair programming adapted to work with the whole team - “For an idea to go from your head into the computer, it must go through someone else’s hands.” Speak at the highest level of abstraction that the driver (and the rest of the team) is able to digest at the moment\nTimed Rotation - 20-40 minutes. We don’t require that everyone take the driver role; it is everyone’s choice whether to do so\nWhole Team - every contributor to the project is an integral part of the whole team; when we don’t have the skills we need within the team, we find someone who does and invite them to work with us to accomplish the needed work\nReflect, Tune, and Adjust Frequently - based on agile principle: “At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.”",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "collab_pairprog.html#tips-and-tricks-for-effective-team-programming",
    "href": "collab_pairprog.html#tips-and-tricks-for-effective-team-programming",
    "title": "Pair Programming",
    "section": "Tips and Tricks for Effective Team Programming",
    "text": "Tips and Tricks for Effective Team Programming\nAdapted from Corey Johannsen: https://blog.newrelic.com/2017/10/31/mob-programming-hurdles/\n\nSuggest, don’t dictate: Instead of telling the driver what to type into their editor, we explain what we are trying to accomplish and then help the driver find the best solution. We have found that drivers learn better this way, and they don’t just end up feeling like a stenographer. Whenever possible, we ask questions that lead the driver to discover the answers on their own.\nStay focused and be present: Shut your laptop and put your phone away. I have struggled with following this guideline—we all have—and I recognize that the distraction almost always affects the rest of the mob. We tell all our mob members to be present, and if you can not, it is OK to leave until you can be.\nUse a timer, but be ready to pause it: We switch drivers every 20 - 60 minutes. However, we often wander off implementation into design discussions—it’s unavoidable—so this is when we pause the timer. This is another key guideline of our mob: the time you spend driving should be dedicated to writing the code that helps complete the task, not discussing design solutions.\nSet specific tasks for each session: When our mob gathers for a session, we first agree on and create a checklist of the tasks we are going to complete and order them by priority on a whiteboard. This ensures we are all focused on the same task and keeps us moving forward. Additionally, this keeps us aligned with Minimal Marketable Feature (MMF) work, which we can communicate with our engineering and product managers to assure them we are completing tasks that align with developing small, self-contained features that demonstrate immediate customer value.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "collab_pairprog.html#acknowledgements",
    "href": "collab_pairprog.html#acknowledgements",
    "title": "Pair Programming",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis section reuses a lot of materials from an R Meetup organized by the Santa Barbara R Users group (https://github.com/R-Meetup-SB/hackathon-201806), including material prepared by Irene Steves.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "preserve_data-fair.html",
    "href": "preserve_data-fair.html",
    "title": "How FAIR are your data?",
    "section": "",
    "text": "We recommend using the FAIR & CARE principles as guidance to maximize the reusability of your data by you, your collaborators, other researchers, and future-you. Your plan should ensure that detailed documentation adopting existing standards is developed during the entire duration of your project (don’t wait until the very end!!) and that this documentation is archived along with your data and code in a publicly accessible data repository will set you up for success.\n\n\n\nsource: https://www.gida-global.org/care\n\n\nA good reference to get you started with FAIR principles: https://perma.cc/CT8P-D5MK\nand on CARE principles: https://perma.cc/3ZHR-6JAG",
    "crumbs": [
      "Preserving things",
      "Are you FAIR?"
    ]
  },
  {
    "objectID": "preserve_data-fair.html#fair-pinciples",
    "href": "preserve_data-fair.html#fair-pinciples",
    "title": "How FAIR are your data?",
    "section": "",
    "text": "We recommend using the FAIR & CARE principles as guidance to maximize the reusability of your data by you, your collaborators, other researchers, and future-you. Your plan should ensure that detailed documentation adopting existing standards is developed during the entire duration of your project (don’t wait until the very end!!) and that this documentation is archived along with your data and code in a publicly accessible data repository will set you up for success.\n\n\n\nsource: https://www.gida-global.org/care\n\n\nA good reference to get you started with FAIR principles: https://perma.cc/CT8P-D5MK\nand on CARE principles: https://perma.cc/3ZHR-6JAG",
    "crumbs": [
      "Preserving things",
      "Are you FAIR?"
    ]
  },
  {
    "objectID": "preserve_data-fair.html#fair-assessment",
    "href": "preserve_data-fair.html#fair-assessment",
    "title": "How FAIR are your data?",
    "section": "FAIR assessment",
    "text": "FAIR assessment\n\nFindable\n\n1. Does the dataset have any identifiers assigned?\n\nNo identifier\nLocal identifier\nWeb address (URL)\nGlobally unique identifier, citable and persistent (e.g. DOI, PURL, ARK or Handle)\n\n\n\n2. Is the dataset identifier included in all metadata records/files describing the data?\n\nNo\nYes\n\n\n\n3. How is the data described with metadata?\n\nThe data are not described\nBrief title and description\nComprehensive, but in a text-based, non-standard format\nComprehensively using a recognized formal machine-readable metadata schema\n\n\n\n4. What type of repository or registry is the metadata record in?\n\nThe data are not described in any repository\nLocal institutional repository\nDomain-specific repository\nGeneralist public repository\nData are in one place but discoverable through several registries\n\n\n\n\nAccessible\n\n5. How accessible is the data\n\nNo access to data or metadata\nAccess to metadata only\nUnspecified conditional access, e.g. contact the data custodian\nEmbargoed access after a specified date\nA de-identified / modified subset of the data is publicly accessible\nFully accessible to persons who meet explicitly stated conditions, e.g. ethics approval for\n\nsensitive data\n\nPublicly accessible\n\n\n\n6. Is the data available online without requiring specialized protocols or tools once access has been approved?\n\nNo access to data\nBy individual arrangement\nFile download from online location\nNon-standard web service (e.g. OpenAPI, Swagger, Informal API)\nStandard web service API (e.g. OGC)\n\n\n\n7. Will the metadata record be available even if the data are no longer available?\n\nUnsure\nNo\nYes\n\n\n\n\nInteroperable\n\n8. What (file) formats is the data available in?\n\nMostly in a proprietary format\nIn a structured, open standard, non-machine-readable format\nIn a structured, open standard, machine-readable format\n\n\n\n9. What best describes the types of vocabularies/ontologies/tagging schemas used to define the data elements?\n\nData elements not described\nNo standards have been applied in the description of data elements\nStandardised vocabularies/ontologies/schemas without global identifiers\nStandardised, open and universal, using resolvable global identifiers linking to explanations\n\n\n\n10. How is the metadata linked to other data and metadata (to enhance context and clearly indicate relationships)?\n\nThere are no links to other metadata\nThe metadata record includes URI links to related metadata, data and definitions\nMetadata is represented in machine-readable format, e.g. in a linked format such as\n\nResource Description Framework (RDF)\n\n\n\nReusable\n\n11. Which of the following best describes the licence/usage rights attached to the data?\n\nNo licence\nNon-standard text-based licence\nNon-standard machine-readable licence (clearly indicating under what conditions the data\n\nmay be reused)\n\nStandard text-based licence\nStandard machine-readable licence (e.g. Creative Commons)\n\n\n\n12. How much provenance information has been captured to facilitate data reuse?\n\nNo provenance information is recorded\nPartially recorded\nFully recorded in a text format\nFully recorded in a machine-readable format",
    "crumbs": [
      "Preserving things",
      "Are you FAIR?"
    ]
  },
  {
    "objectID": "preserve_data-fair.html#acknowledgements",
    "href": "preserve_data-fair.html#acknowledgements",
    "title": "How FAIR are your data?",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis evaluation portion of this section has been adapted from the UK Data Service https://ukdataservice.ac.uk/app/uploads/exercise_fairdata.pdftarget=“_blank” and is licensed under a Creative Commons Attribution CC-BY 4.0 International License.",
    "crumbs": [
      "Preserving things",
      "Are you FAIR?"
    ]
  },
  {
    "objectID": "data_mgmt.html",
    "href": "data_mgmt.html",
    "title": "Managing your lab data",
    "section": "",
    "text": "Data are also part of the scientific products your Lab is producing. It is thus important to develop strategies to manage them well, so you can reuse them. Well managed, data can become an an asset for your lab and your collaborators. In the end, the goal of managing your data is to develop documentation that will enable others (including your future self) to understand and reuse those data sets. This documentation does not start when you are wrapping up your project, this process needs to be integrated all along the data life cycle of your project.\n\n\nTo help you think about your Lab data management, you can divide the life cycle of a data set in several phases:\n\n\n\nResearch Data Management lifecycle; source: https://osf.io/d8fqh",
    "crumbs": [
      "Managing your Lab data",
      "What is data management?"
    ]
  },
  {
    "objectID": "data_mgmt.html#data-are-a-scientific-product",
    "href": "data_mgmt.html#data-are-a-scientific-product",
    "title": "Managing your lab data",
    "section": "",
    "text": "Data are also part of the scientific products your Lab is producing. It is thus important to develop strategies to manage them well, so you can reuse them. Well managed, data can become an an asset for your lab and your collaborators. In the end, the goal of managing your data is to develop documentation that will enable others (including your future self) to understand and reuse those data sets. This documentation does not start when you are wrapping up your project, this process needs to be integrated all along the data life cycle of your project.\n\n\nTo help you think about your Lab data management, you can divide the life cycle of a data set in several phases:\n\n\n\nResearch Data Management lifecycle; source: https://osf.io/d8fqh",
    "crumbs": [
      "Managing your Lab data",
      "What is data management?"
    ]
  },
  {
    "objectID": "data_mgmt.html#goal-developing-your-research-lab-data-management-guidelines",
    "href": "data_mgmt.html#goal-developing-your-research-lab-data-management-guidelines",
    "title": "Managing your lab data",
    "section": "Goal: developing your Research Lab data management guidelines",
    "text": "Goal: developing your Research Lab data management guidelines\nOne of the goals of our data management session together is to develop a common understanding among lab members of “good enough” norms to adhere to help manage your research lab data in a coordinated way. We strongly encourage building on our discussions to develop written guidelines that reflect those norms and help onboard new lab members. Those guidelines should be seen as a living document that needs to evolve along with your research activities.",
    "crumbs": [
      "Managing your Lab data",
      "What is data management?"
    ]
  },
  {
    "objectID": "github_workflows.html",
    "href": "github_workflows.html",
    "title": "Collaborative workflows to code together",
    "section": "",
    "text": "A fork is a copy of a repository that will be stored under your user account. Forking a repository allows you to freely experiment with changes without affecting the original project. We can create a fork on Github by clicking the “fork” button in the top right corner of our repository webpage. \nMost commonly, forks are used to either propose changes to someone else’s project or to use someone else’s project as a starting point for your own idea.\nWhen you are satisfied with your work, you can initiate a Pull Request to initiate discussion about your modifications and requesting to integrate your changes to the main repository. Your commit history allows the original repository administrators to see exactly what changes would be merged if they accept your request. Do this by going to the original repository and clicking the “New pull request” button\nNext, click “compare across forks”, and use the dropdown menus to select your fork as the “head fork” and the original repository as the “base fork”.\nThen type a title and description for the changes you would like to make. By using GitHub’s @mention syntax in your Pull Request message, you can ask for feedback from specific people or teams.\nThis workflow is recommended when you do not have push/write access to a repository, such as contributing to a open source software or R package, or if you are heavily changing a project.\n\n\n\nWhen you collaborate closely and actively with colleagues, you do not want necessarily to have to review all their changes through pull requests. You can then give them write access (git push) to your repository to allow them to directly edit and contribute to its content. This is the workflow we will recommend to use within your working group.\n\n\n\nClick on the repository\nOn the right panel, click \nOn the left pane, click Collaborators and enter the usernames you want to add\n\nUnder this collaborative workflow, we recommend to use git branches combined with pull requests to avoid conflicts and to track and discuss collaborators contributions.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_workflows.html#collaborating-through-forking-aka-the-github-workflow",
    "href": "github_workflows.html#collaborating-through-forking-aka-the-github-workflow",
    "title": "Collaborative workflows to code together",
    "section": "",
    "text": "A fork is a copy of a repository that will be stored under your user account. Forking a repository allows you to freely experiment with changes without affecting the original project. We can create a fork on Github by clicking the “fork” button in the top right corner of our repository webpage. \nMost commonly, forks are used to either propose changes to someone else’s project or to use someone else’s project as a starting point for your own idea.\nWhen you are satisfied with your work, you can initiate a Pull Request to initiate discussion about your modifications and requesting to integrate your changes to the main repository. Your commit history allows the original repository administrators to see exactly what changes would be merged if they accept your request. Do this by going to the original repository and clicking the “New pull request” button\nNext, click “compare across forks”, and use the dropdown menus to select your fork as the “head fork” and the original repository as the “base fork”.\nThen type a title and description for the changes you would like to make. By using GitHub’s @mention syntax in your Pull Request message, you can ask for feedback from specific people or teams.\nThis workflow is recommended when you do not have push/write access to a repository, such as contributing to a open source software or R package, or if you are heavily changing a project.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_workflows.html#collaborating-through-write-push-access",
    "href": "github_workflows.html#collaborating-through-write-push-access",
    "title": "Collaborative workflows to code together",
    "section": "",
    "text": "When you collaborate closely and actively with colleagues, you do not want necessarily to have to review all their changes through pull requests. You can then give them write access (git push) to your repository to allow them to directly edit and contribute to its content. This is the workflow we will recommend to use within your working group.\n\n\n\nClick on the repository\nOn the right panel, click \nOn the left pane, click Collaborators and enter the usernames you want to add\n\nUnder this collaborative workflow, we recommend to use git branches combined with pull requests to avoid conflicts and to track and discuss collaborators contributions.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_workflows.html#working-with-branches",
    "href": "github_workflows.html#working-with-branches",
    "title": "Collaborative workflows to code together",
    "section": "Working with branches",
    "text": "Working with branches\n\nCreating a new branch\nIn RStudio, you can create a branch using the git tab.\n\nClick on the branch button\n\n\n\n\n\n\n\n\n\n\n\nFill the branch name in the new branch window; in this example, we are going to use test for the name; leave the other options as default and click create\n\n\n\n\n\n\n\n\n\n\n\nyou will be directly creating a local and remote branch and switch to it\n\n\n\n\n\n\n\n\n\n\nCongratulations you just created your first branch!\nLet us check on Github:\n\n\n\n\n\n\n\n\n\nAs you can see, now there are two branches on our remote repository: - master - test\n\n\nUsing a branch\nHere there is nothing new. The workflow is exactly the same as we did before, excepts our commit will be created on the test branch instead of the master branch.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_org.html",
    "href": "github_org.html",
    "title": "GitHub Organizations",
    "section": "",
    "text": "Facilitate collaboration:\n\nCreate teams to easily assign people to repositories\nManage tasks at the organization level (not tight to a specific repository)\n\nSimplify code management:\n\nThe organization owns the repository\nDesign templates to streamline documentation\nAssign roles to users, including external collaborators\n\nIncrease your visibility on GitHub:\n\nCreate a landing page introducing your lab\nOne stop to see your Lab contributions\n\n\nHere is an example we created: https://github.com/awesomer-lab",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "GitHub Organization for your Lab"
    ]
  },
  {
    "objectID": "github_org.html#why-a-github-organization",
    "href": "github_org.html#why-a-github-organization",
    "title": "GitHub Organizations",
    "section": "",
    "text": "Facilitate collaboration:\n\nCreate teams to easily assign people to repositories\nManage tasks at the organization level (not tight to a specific repository)\n\nSimplify code management:\n\nThe organization owns the repository\nDesign templates to streamline documentation\nAssign roles to users, including external collaborators\n\nIncrease your visibility on GitHub:\n\nCreate a landing page introducing your lab\nOne stop to see your Lab contributions\n\n\nHere is an example we created: https://github.com/awesomer-lab",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "GitHub Organization for your Lab"
    ]
  },
  {
    "objectID": "github_org.html#setting-up-your-labs-github-organization",
    "href": "github_org.html#setting-up-your-labs-github-organization",
    "title": "GitHub Organizations",
    "section": "Setting up your Lab’s GitHub Organization",
    "text": "Setting up your Lab’s GitHub Organization\nBefore setting up your organization, make sure that you have claimed your education GitHub account first!!\n\n\n\n\n\n\nDid you know you are eligible for GitHub Education perks?\n\n\n\nSince we are part of an University, students and faculty have access to special account benefits for free. The application process is straightforward. Get started here: https://education.github.com/\n\n\n\nYou can create an organization by clicking on the + sign menu at the top right of the GitHub taskbar and select New organization\n\n\n\n\n\n\n\nThis will send you to a new page with several options to start your organization. Choose the free option at this time.\n\n\n\n\n\n\n\nNow you can provide the name of your organization. We recommend naming it in a way that reflects your Lab name to help with the organization’s branding. Select the email you used to get the education discount and check the “my personal account” option.\n\n\n\n\n\n\n\nAnd congratulations this is it!! You can now invite your collaborators to the organization (you will be able to do so later as well).\n\n\n\n\n\n\n\nYour organization page should look as follows:\n\n\n\n\n\n\nNote all the suggestions that GitHub is providing to help you customize your organization according to your needs. We are going to follow the recommendation on the right side (red box above) to add a special README.md that will act as a landing page for our organization.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "GitHub Organization for your Lab"
    ]
  },
  {
    "objectID": "github_org.html#customizing-your-github-organization",
    "href": "github_org.html#customizing-your-github-organization",
    "title": "GitHub Organizations",
    "section": "Customizing your GitHub Organization",
    "text": "Customizing your GitHub Organization\n\nAdding a landing page\nAdding a landing page is a great opportunity to describe your research lab and what content one can expect to find in this organization. It is also a good location to describe guidelines on how to best engage with you and provide contact information.\n\nClick on the create a README file on the right sidebar (see red box above). This will trigger the creation of a new special repository called .github that will be used to host your README file. Click Create repository.\n\n\n\n\n\n\n\nFill out the necessary information as follows:\n\n\n\n\n\n\nWe recommend checking the box Add a README file as a good practice but note it is not the README that will be used as your landing page, it is the one describing this new repository hosting your landing page README in a special subfolder.\n\nCreate your landing page by clicking on the Add README button on the right sidebar (red box below)\n\n Note the path to this special README: .github/profile/README.md\n\nEdit your landing page. The template used to create this special README provides suggestions about the type of information you might want to add to your landing page. Those suggestions are in a comment block (delimited by &lt;!-- & --&gt;) and thus won’t be shown when the README is rendered. We still do recommend deleting this block once you are done editing your README\n\n\n\n\n\n\nHere is an example of how we defined the landing page README for our test organization:\n\n\n\n\n\n\nSave your README: Now that you have your first version of your GitHub organization landing page (you can always iterate later on it), we are ready to save this version by clicking on the Commit changes button (red box above). This will prompt a new page where you can add a commit message to describe the changes. Finally, you can hit the Commit changes button to save this version.\n\n\n\n\n\n\nVoilà 🎉 !! When you go back to your organization’s main page, you should now see the text you just wrote at the top of the landing page!\n\n\n\n\n\n\n\nSetting up your organization profile\nNow that you have a landing page, it is also a great idea to fill out some metadata about your organization under the Settings tab of the main navigation bar (top right). This will help with the discovery of your Organization. You can provide a more Human friendly name, an email to reach out to you, a short description of your organization, and an URL such as your lab home page.\n\nFinally, click Update profile to save your changes.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "GitHub Organization for your Lab"
    ]
  },
  {
    "objectID": "github_template.html",
    "href": "github_template.html",
    "title": "Using GitHub Templates to document things",
    "section": "",
    "text": "You can create templates to model a specific repository setup when creating a new repository. The advantage of such a template is that you can provide a boilerplate for the README and any other files you would like your collaborators to provide when setting up a new project / repository.\nTo create a template repository you can either use an existing one or create a new one for this specific purpose. We are going to do the latter.\nLet’s create a new repository as we have done previously we recommend adding the word “template” in the name so it makes its purpose more obvious\n\n\n\n\n\nNow you can work on the content of the repository, for example adding a README with instructions to follow when setting up a new repository: https://github.com/awesomer-lab/repo-template\nOnce your repository is ready, you can go to the Settings tab in the taskbar of the repository and check the box Template repository under the repository name.\n\n\n\n\n\nNote that you can keep editing the template repository after this step.\nNow you can use your template when creating a new repository by selecting your template from the dropdown menu above the repository name. Note is might take a few seconds to fetch all your templates.\n\n\n\n\n\nVoilà! Now you can create standardized repositories and documentation quite easily!! Note that under the name of the newly created repository from the template, it is mentioned that it was created from a template.",
    "crumbs": [
      "Coding as a Lab",
      "Streamlining documentation",
      "Repository template"
    ]
  },
  {
    "objectID": "github_template.html#repository-templates",
    "href": "github_template.html#repository-templates",
    "title": "Using GitHub Templates to document things",
    "section": "",
    "text": "You can create templates to model a specific repository setup when creating a new repository. The advantage of such a template is that you can provide a boilerplate for the README and any other files you would like your collaborators to provide when setting up a new project / repository.\nTo create a template repository you can either use an existing one or create a new one for this specific purpose. We are going to do the latter.\nLet’s create a new repository as we have done previously we recommend adding the word “template” in the name so it makes its purpose more obvious\n\n\n\n\n\nNow you can work on the content of the repository, for example adding a README with instructions to follow when setting up a new repository: https://github.com/awesomer-lab/repo-template\nOnce your repository is ready, you can go to the Settings tab in the taskbar of the repository and check the box Template repository under the repository name.\n\n\n\n\n\nNote that you can keep editing the template repository after this step.\nNow you can use your template when creating a new repository by selecting your template from the dropdown menu above the repository name. Note is might take a few seconds to fetch all your templates.\n\n\n\n\n\nVoilà! Now you can create standardized repositories and documentation quite easily!! Note that under the name of the newly created repository from the template, it is mentioned that it was created from a template.",
    "crumbs": [
      "Coding as a Lab",
      "Streamlining documentation",
      "Repository template"
    ]
  },
  {
    "objectID": "datamgmt_prompts.html",
    "href": "datamgmt_prompts.html",
    "title": "Data Management Prompts",
    "section": "",
    "text": "Here are a few prompts to help you start thinking about how you manage your data and where there are potential challenges. These prompts should help you to decide where to start and we encourage you to discuss them with the entire team\n\n\n\nDo you collect Field or/and Lab data?\nWhat is your Research Lab’s typical process for data collection? Frequency, events-based or continuous monitoring?\nDo you have a QA/QC workflow/strategy in place (documented or not)?\nDo you have file naming conventions in place (documented or not)?\n\n\n\n\n\nWhat are your lab challenges related to accessing, manipulating and/or moving data?\nWhat are your lab needs, pain points, or where do you feel time is wasted related to ensuring future use of data by yourself or others?\nWhat are your main security or data loss concerns related to your data?\nWhat are your data that might contain sensitive information (geolocation, human subjects, …) and thus need special handling?\nWhat are your current backup strategies?\n\n\n\n\n\nWhat type of analysis is conducted on your data?\nWhat is the unit of analysis for your projects? (individual, community, space, time…)?\nIs it mostly done using a scripting language (R, Python)?\nWhat is the saturation level and how many events/data points are enough to come to a conclusion?\nIs there a mix of qualitative and quantitative analysis?",
    "crumbs": [
      "Managing your Lab data",
      "A few questions"
    ]
  },
  {
    "objectID": "datamgmt_prompts.html#how-are-you-feeling-about-your-data",
    "href": "datamgmt_prompts.html#how-are-you-feeling-about-your-data",
    "title": "Data Management Prompts",
    "section": "",
    "text": "Here are a few prompts to help you start thinking about how you manage your data and where there are potential challenges. These prompts should help you to decide where to start and we encourage you to discuss them with the entire team\n\n\n\nDo you collect Field or/and Lab data?\nWhat is your Research Lab’s typical process for data collection? Frequency, events-based or continuous monitoring?\nDo you have a QA/QC workflow/strategy in place (documented or not)?\nDo you have file naming conventions in place (documented or not)?\n\n\n\n\n\nWhat are your lab challenges related to accessing, manipulating and/or moving data?\nWhat are your lab needs, pain points, or where do you feel time is wasted related to ensuring future use of data by yourself or others?\nWhat are your main security or data loss concerns related to your data?\nWhat are your data that might contain sensitive information (geolocation, human subjects, …) and thus need special handling?\nWhat are your current backup strategies?\n\n\n\n\n\nWhat type of analysis is conducted on your data?\nWhat is the unit of analysis for your projects? (individual, community, space, time…)?\nIs it mostly done using a scripting language (R, Python)?\nWhat is the saturation level and how many events/data points are enough to come to a conclusion?\nIs there a mix of qualitative and quantitative analysis?",
    "crumbs": [
      "Managing your Lab data",
      "A few questions"
    ]
  },
  {
    "objectID": "preserve_self.html",
    "href": "preserve_self.html",
    "title": "Document yourself",
    "section": "",
    "text": "Don’t forget to document yourself and your collaborators!!\nIt is important to be able to reference yourself as a researcher and as an author of your work in a non ambiguous manner. ORCID is a great way to create a persistent digital identifier (an ORCID iD) that you own and control, and that distinguishes you from every other researcher. ORCID is also more and more used as an authentication system for many services (e.g. data repositories).\n\n\nSource: https://rcd.ucsb.edu/data-literacy-series/search-view",
    "crumbs": [
      "Preserving things",
      "Document yourself"
    ]
  },
  {
    "objectID": "01-handson_github_website.html",
    "href": "01-handson_github_website.html",
    "title": "Using the GitHub website",
    "section": "",
    "text": "In this section, we will be using the GitHub.com website and demonstrate that you do not need to be a programmer to use version control and edit files on GitHub.\n\n\n\n\n\n\nDon’t have a GitHub account?\n\n\n\n\n\nIf you have not already created a GitHub username, please do so now:\n\nGitHub: https://github.com\nFollow optional advice on choosing your username\n\n\n\n\n\n\n\n\n\n\nOur asks\n\n\n\n\nAs a Team of two\n\nHelp each other, everyone is bringing different skills! Talk it out!\nListen to each other; avoid judgment and solutioneering.\nHave fun!\n\n\n\nPrompt\nWe want to log the information about people’s favorite desserts using a repository.\n\n\n\n\nPerson 1 (owner):\n\nCreate a repository using the following these instructions steps 1-6\n\n\n\nEdit the README to:\n\nReplace the title (first line starting with #) with something better! Maybe Favorite Desserts\nAdd your name and your favorite dessert below the title: e.g. - Julien: crepes\n\n\n\n\n\n\n\n\n\n\n\n\nAdd Person 2 as a collaborator following these instructions\n\n\n\nPerson 2 (collaborator):\n\nCheck your email to accept the invitation\nGo to the repository website (link is provided in the invitation)\nStart editing the README.md by clicking on pen at the top of the README.md file to edit it\n\n\n\n\n\n\n\n\n\n\n\nAdd your name and your favorite dessert below the title: e.g. - Sophia: chocolate\nClick Commit changes\nAdd a descriptive commit message, “add my favorite dessert”\n\n\n\n\n\n\n\n\n\n\n\nClick Commit changes to confirm\n\n\n\n\n\n\n\n\n\n\n\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\n\nJust drag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file e.g. Adding dessert csv & hit Commit changes\nYour have has been uploaded. Click on the filename to see it!\n\nYou should have something similar to this repo: https://github.com/brunj7/favorite-desserts\n\n\nBonus\nPerson 2: Try to edit the csv file directly on GitHub!\nPerson 1: Your turn!\nNo need to be a programmer to contribute to analytical workflows with GitHub!!",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Hands-on: Using Github's website"
    ]
  },
  {
    "objectID": "preserve_readme.html",
    "href": "preserve_readme.html",
    "title": "The power of READMEs",
    "section": "",
    "text": "README files are not a new thing. They have been around computer projects since the early days. One great thing about the popularization of “markdown” syntax (and the visual formatting of it supported by most code repositories) is that you can move beyond a simple text file and start to present a compelling entry point to your project that can link to various parts of your project as well as external resources.\nGood types of information to have in a README:\n\nTitle capturing the essence of the project\nList of current contributors\nA short explanation of the goal / purpose\nHow to install / where to start\nA quick demo on how to use the content (can be a link to another document as well)\nWhat to do if a bug is spotted\nHow to contribute\nLicensing\nAcknowledgements of authors, contributors, sponsors or other related work\n\nTip: Adding images, short videos / animations can make a README more engaging.\n\nData README\nMost data repositories will ask you to provide some kind of README file to help describe the content you are archiving. Here is a template you may customize for your project needs: https://doi.org/10.5281/zenodo.10828379\n\n\nCode README\nNeed some inspiration ?\n\nCurated list of READMEs: https://github.com/matiassingers/awesome-readme\nHere is a interesting template: https://github.com/navendu-pottekkat/awesome-readme/tree/master\nWhen you start an R package with the usethis package, a README will be created for you with all the relevant sections for such type of project.\nPick a package you like and inspect its README",
    "crumbs": [
      "Preserving things",
      "The power of README"
    ]
  },
  {
    "objectID": "preserve_computing-env.html",
    "href": "preserve_computing-env.html",
    "title": "Preserve your computing environment",
    "section": "",
    "text": "Your analysis was done with specific versions of the program used (e.g. R 4.4.3) but also of all the packages involved, as well as the specifications of the Operating System (OS) that was used. The good news is that there are tools to help you systematically capture this information.\nIn R:\nsessionInfo() or devtools::session_info() are great ways to capture this information. You should save it into a session_info.txt file to include in your GitHub repository\nIn Python:\npip freeze &gt; requirements.txt will capture all the python modules installed in your current environment",
    "crumbs": [
      "Preserving things",
      "Your computing environment"
    ]
  },
  {
    "objectID": "preserve_computing-env.html#virtual-environments",
    "href": "preserve_computing-env.html#virtual-environments",
    "title": "Preserve your computing environment",
    "section": "Virtual environments",
    "text": "Virtual environments\nYou can even go a step further and help others to recreate the same computing environment that you used independently of what versions you have installed on your machine.\n\nR\nHere is a short introduction to renv, an R package that creates virtual environment to encapsulate your R work. \nWe are going to add renv to our shorebird data cleaning project. Make sure you have the renv package installed:\ninstall.packages(\"renv\")\nYou may also choose Tools&gt;Project Options&gt;Environments and check “use renv for this project”\nOr at the R console:\nrenv::init( )\nLet’s check the new files that we have…\n\nLook at the .gitignore\nLook at the renv.lock file\n\nLet’s say we reworked our script and suppose we would need the naniar R package to deal with the NAs. Let’s update or virtual environment:\nrenv::install(\"naniar\")\nAdd some R code using this package, for example\nlibrary(naniar)\n\nsnowsurvey_csv %&gt;% \n  miss_var_summary()\nAlright, now that the installation is completed and we added this package to our code, we can save, and take a snapshot:\nrenv::snapshot()\nThis action will update the lock file, and we will see naniar and all its dependencies included.\nLet’s check. If updated, you should be good to go. If your attempts to update packages introduced new problems, you may run renv::restore() to revert to the previous state as encoded in the lockfile.\nUse .libPaths() to confirm where package installations are located!\nWant to know more? here is a good resource to get started: https://rstudio.github.io/renv/articles/renv.html\n\n\nPython\nvirtualenv is a tool to create Python virtual environments. In a nutsheel here are the steps to follow:\nCreate a new folder, your project folder. I will use first_example. Make sure you set the path to this folder.\n\nNote: The environment will be created in the current version of Python that you are running (in Conda we can specify the version we want).\n\nTo create the environment: (second venv is the name of the environment)\npython3 -m venv first_example\n\nThe -m flag makes sure you are creating a pip that is tied to the active Python executable\n\nTime to activate it:\nsource first_example/bin/activate\nYou can tell it is activated because it shows (first_example) in the prompt.\nLet’s check which packages are there with a new pip list\nNothing, right? Only setup tools, and pip). Nothing to worry about, it should be this way! Let’s proceed.\nInstall libraries:\nWe will be installing two packages for this example.\nFirst:\npip install numpy\nAnd then:\npip install pandas\nThis should take a little longer!\nAnother pip list\nAlright, the packages and dependencies installed are right there!\nExport and allow future replication of the environment:\nLet’s save the packages and dependencies we have after the installs.\npip freeze\nThat should be stored in a `requirements.txt file\nSo let’s get it redirected to the required file:\npip freeze &gt; requirements.txt\nQuestion: This file won’t leave inside the venv folder, but rather in the project root folder any idea why?\nWell, you only need that file to reproduce the environment. And the venv should be should throw away and be able to rebuild easily! So, do not include any project file in that folder and treat that as disposable after the pip freeze\nTo double-check if all is good, we can run the following command:\ncat requirements.txt\nThis file should be included in your repository to let others reinstall your packages and dependencies as needed.\nDeactivate\nIf you are done with that, you should deactivate that environment by typing:\ndeactivate\nThen, you will see you no longer have the environment we created in our prompt.\nIf you are willing to delete the environment altogether, you should delete the directory for the virtual environment\nRemove folder:\nrm -rf first_example/\nReusing the Requirements\nCreate a new project folder to reuse the requirements\nmkdir my_project\nCreate a virtual env for it\npython3 -m venv my_project/venv\nActivate it\nsource my_project/venv/bin/activate\nInstall required packages\npip install -r requirements.txt\n\nAttention! Never include project files in the venv folder.\nDo not commit your venv file to the environment itself to source control (git ignore)\nYou may install more packages and update the requirements.txt with the pip freeze command\nYou should commit /share only your requirements.txt file. That is all that others and your future self need to recreate the environment.\nThe environment should be something you should throw away and be able to rebuild easily.\nMake sure to deactivate when done using it.\n\n\nIf you are using Conda\nChecking what is in the system:\nconda list\nTo create the environment:\nconda create --name first_example\n\n&gt; proceed (\\[y\\]/n)? y\nTime to activate it\nconda activate first_example only work on conda 4.6 and later versions. For Conda versions prior to 4.6, run:\n\nWindows: activate or Linux and macOS: source activate\n\nYou can tell it is activated because it shows (first_example) in the prompt.\nLet’s check which packages are there with a new\nconda list first_example\nEmpty, right? Nothing to worry about, it should be this way! Let’s proceed.\nInstall packages:\nWe will be installing two packages for this exercise.\nFirst:\nconda install numpy\n\n&gt; proceed (\\[y\\]/n)? y\nAnd then, one more package:\nconda install Pandas\n\n&gt; proceed (\\[y\\]/n)? y\nNow check which packages are in the specific environment we are working on:\nconda list\nAlright, the packages and dependencies installed are right there!\nExport and allow future replication of the environment:\nLet’s save the packages and dependencies we have after the installs.\nconda list --export\nThat should be stored in a environments.yml file\nSo let’s get it redirected to the required file:\nconda list -e &gt; environment.yml\nThis file should be included in your research compendium to let others reinstall your packages and dependencies as needed.\nDeactivate it:\nIf you are done with that, you should deactivate that environment by typing:\nconda deactivate\nNote: only works on conda 4.6 and later versions. For conda versions before 4.6, run:\nWindows: deactivate or Linux and macOS: source deactivate\nThen, you will see you no longer have the environment we created in our prompt.\nIf you are willing to delete the environment altogether, you should delete the directory for the virtual environment\nBack to base we can create a new environment based on the .yml packages and dependencies by running (this is noted on top of the yml file):\nconda create --name my-env --file environment.yml\n\n&gt; proceed (\\[y\\]/n)? y\nActivate it:\nconda activate my-env (or see above if conda version \\&lt; 4.6)\nproceed ([y]/n)? Y\nCheck if packages are there:\nconda list\nRemember to deactivate it when done:\nconda deactivate (or see above if conda version \\&lt; 4.6)\nCheck all your environments conda env list\nMore info: https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html",
    "crumbs": [
      "Preserving things",
      "Your computing environment"
    ]
  },
  {
    "objectID": "github_teams.html",
    "href": "github_teams.html",
    "title": "GitHub Teams",
    "section": "",
    "text": "You can use teams to manage access for people in an organization and for sending notifications (you can @team as you will do with @user in issues, commit messages, and more). Teams are a great way to manage access to repositories. You can add specific people to different teams and then you can use those teams to provide similar access to repositories. If you are familiar with Google Groups and how they can be used to provide access to folders in Google Drive, this is the same concept.\nTeams are very convenient when a set of collaborators work on the same project and therefore need the same access to different repositories within your organization. You can simply add the team to a specific repository and all the team members will be added to the repositories instead of having to add each user individually.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_teams.html#what-are-github-teams",
    "href": "github_teams.html#what-are-github-teams",
    "title": "GitHub Teams",
    "section": "",
    "text": "You can use teams to manage access for people in an organization and for sending notifications (you can @team as you will do with @user in issues, commit messages, and more). Teams are a great way to manage access to repositories. You can add specific people to different teams and then you can use those teams to provide similar access to repositories. If you are familiar with Google Groups and how they can be used to provide access to folders in Google Drive, this is the same concept.\nTeams are very convenient when a set of collaborators work on the same project and therefore need the same access to different repositories within your organization. You can simply add the team to a specific repository and all the team members will be added to the repositories instead of having to add each user individually.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_teams.html#create-a-team",
    "href": "github_teams.html#create-a-team",
    "title": "GitHub Teams",
    "section": "Create a team",
    "text": "Create a team\nIn the navigation bar at the top of your organization page, click on the Teams tab. Normally this is the page you use to see and manage the existing teams of your organization. Since we do not have teams yet, this page provides a short overview of what teams can be used for. Click on the New Team green button at the bottom to start creating your first team.\n\nProved the name and a short description of your team. We recommend to let the other options to their default settings.\n\n\n\n\n\nYour team has been created, but as of now you are the only member. Let’s invite some collaborators by clicking on the Add a member button on the top right.\n\n\n\n\n\nOn this new window, you can search for GitHub users by their username. If you do not know their username you can search by their full names. Note that if there are no pictures associated with the profile you found or are not sure it is the right person, we recommend not adding this person at this time and reaching out asking for their username (which is unique). When you are sure you found the right persons you can click on Invite.\n\n\n\n\n\nYour collaborators will receive an invitation to join the team. They will have to accept the invitation before they can use the benefits (access to repositories, …) associated with the team. Once your collaborators have accepted your team should look like below.\n\n\n\n\n\nOK, let’s create a second team! In this example, we will create a Research Facilitators team with two members.\n\n\n\n\n\nOnce your GitHub organization has teams, you will the number of existing teams next to the Teams tab.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_teams.html#leveraging-teams",
    "href": "github_teams.html#leveraging-teams",
    "title": "GitHub Teams",
    "section": "Leveraging teams",
    "text": "Leveraging teams\nLet’s create a new repository and use our newly created teams to add several collaborators at once.\n\n\n\n\n\nUnder your newly created organization, create a new repository with the following settings:\n\n\n\n\n\nOnce the repository is created, click on the Settings tab (top right in the grey bar)\n\n\n\n\n\nOn the left panel, click on Collaborators and teams and then click on the green button Add teams\n\n\n\n\n\nStart typing the name of the team you would like to add. Suggestions of teams should come up as you type. Select the relevant team by clicking on the suggestion.\n\n\n\n\n\nFor close collaborators, we recommend using the Maitain level of access that provides a good blend of people being able to do most of the actions they will need to do while not being allowed to conduct destructive actions on accident (like deleting the entire repository). For collaborators you are less familiar with, including their familiarity with GitHub, you might want to start with the Write access.\n\n\n\n\n\nOnce the team added, your settings should look as follow:\n\n\n\n\n\nThe good news is now if you add a collaborator to a specific team, this person will automatically gain access to all the repositories that team has access to! This will streamline the on- and off- boarding process of your team members.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Setting up Teams to better collaborate"
    ]
  }
]