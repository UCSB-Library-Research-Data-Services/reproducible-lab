[
  {
    "objectID": "01-handson_github_website.html",
    "href": "01-handson_github_website.html",
    "title": "Using the GitHub website",
    "section": "",
    "text": "In this section, we will be using the GitHub.com website and demonstrate that you do not need to be a programmer to use version control and edit files on GitHub.\n\n\n\n\n\n\nDon’t have a GitHub account?\n\n\n\n\n\nIf you have not already created a GitHub username, please do so now:\n\nGitHub: https://github.com\nFollow optional advice on choosing your username\n\n\n\n\n\n\n\n\n\n\nOur asks\n\n\n\n\nAs a Team of two\n\nHelp each other, everyone is bringing different skills! Talk it out!\nListen to each other; avoid judgment and solutioneering.\nHave fun!\n\n\n\nPrompt\nWe want to log the information about people’s favorite desserts using a repository.\n\n\n\n\nPerson 1 (owner):\n\nCreate a repository using the following these instructions steps 1-6\n\n\n\nEdit the README to:\n\nReplace the title (first line starting with #) with something better! Maybe Favorite Desserts\nAdd your name and your favorite dessert below the title: e.g. - Julien: crepes\n\n\n\n\n\n\n\n\n\n\n\n\nAdd Person 2 as a collaborator following these instructions\n\n\n\nPerson 2 (collaborator):\n\nCheck your email to accept the invitation\nGo to the repository website (link is provided in the invitation)\nStart editing the README.md by clicking on pen at the top of the README.md file to edit it\n\n\n\n\n\n\n\n\n\n\n\nAdd your name and your favorite dessert below the title: e.g. - Sophia: chocolate\nClick Commit changes\nAdd a descriptive commit message, “add my favorite dessert”\n\n\n\n\n\n\n\n\n\n\n\nClick Commit changes to confirm\n\n\n\n\n\n\n\n\n\n\n\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\n\nJust drag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file e.g. Adding dessert csv & hit Commit changes\nYour have has been uploaded. Click on the filename to see it!\n\nYou should have something similar to this repo: https://github.com/brunj7/favorite-desserts\n\n\nBonus\nPerson 2: Try to edit the csv file directly on GitHub!\nPerson 1: Your turn!\nNo need to be a programmer to contribute to analytical workflows with GitHub!!",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Hands-on: Using Github's website"
    ]
  },
  {
    "objectID": "collab_exchange.html",
    "href": "collab_exchange.html",
    "title": "Code Review Exchange",
    "section": "",
    "text": "Code Exchange is an asynchronous activity that takes place when a teammate is finished working on a script (or a section of it). This teammate will submit a request to another team member to look over the code and provide feedback. It is a great way to:\nThe Reviewer should see this activity as a great way to learn from others through constructive feedback… and so should the Submitter!!\nThere are different way to conduct a code review. It ranges from asking a colleague to look at your code once you reached a milestone, for example a new analysis is working, to leveraging Pull Request (PR), which is a way to ask to merge your changes with the previous version.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "collab_exchange.html#pull-request-pr",
    "href": "collab_exchange.html#pull-request-pr",
    "title": "Code Review Exchange",
    "section": "Pull Request (PR)",
    "text": "Pull Request (PR)\nA big advantage of Pull Request is to document and provide a space to discuss the new code and discuss potential modifications. You can even tag others if you want them to chime in.\nTo be able to create a PR, you need to first either create a branch or a fork, which are two ways to encapsulate your changes while you are working on them. Once you are done you can ask to send back and merge those changes to the current version of the main branch of the repository (for now we will only merge back to main).",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "collab_exchange.html#recommended-reading",
    "href": "collab_exchange.html#recommended-reading",
    "title": "Code Review Exchange",
    "section": "Recommended Reading",
    "text": "Recommended Reading\nIvimey-Cook ER, Pick JL, Bairos-Novak KR, Culina A, Gould E, Grainger M, et al. Implementing code review in the scientific workflow: Insights from ecology and evolutionary biology. Journal of Evolutionary Biology. 2023;36: 1347–1356. doi:10.1111/jeb.14230",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Code Exchange"
    ]
  },
  {
    "objectID": "datamgmt_plan.html",
    "href": "datamgmt_plan.html",
    "title": "Data Management Plan (DMP)",
    "section": "",
    "text": "In a nutshell, your goal is to organize your research lab in a way that will let you document and preserve your scientific products - including raw and derived data when possible. When delivering a project to a funder, it is important to ensure the funder can understand and reuse the products (code, data, apps) you have developed. For those reasons, more and more funders require a data management plan as part of their proposal submission process; therefore, it is a great skill to develop.\nHaving a plan to manage your data will save you from some potential painful hiccups and time as you progress through your project data life cycle. In other words, it is time well spent to develop your data management plan, and the earlier in your project, the better you have a good sense of how you will manage your data. The discussion with your project team about what should be included in the plan is as important as the plan itself since the questions you will have to answer will help you think more about your data (e.g., type, size, processing methods, etc.) and assign roles and responsibilities among project members.\nOnce your lab data are well managed, it becomes easier to archive and share relevant data in a publicly accessible data repository such as Dryad as your projects are completed or important milestones are achieved. For your work to generate a reproducible data archive, metadata and documentation must also be provided, as well as the scripts you have developed for your analysis. Here is a good example of a well-documented data archive: https://doi.org/10.25349/D9JK6N\nBefore writing your plan, we recommend you get familiar with the FAIR and CARE principles to guide your process.\nThose two principles should be the overarching guidelines that will guide the development of your data management plan.",
    "crumbs": [
      "Managing your research data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#developing-your-lab-data-management-plan-dmp",
    "href": "datamgmt_plan.html#developing-your-lab-data-management-plan-dmp",
    "title": "Data Management Plan (DMP)",
    "section": "Developing your Lab Data Management Plan (DMP)",
    "text": "Developing your Lab Data Management Plan (DMP)\nYou might already have experience with writing project specific data management plans as they are often required in proposals. The process to develop your lab’s data management plan is very similar, but will be more focused on developing general guidelines for your lab that can be adatped for project specific needs. We recommend using the FAIR & CARE principles as guidance to maximize the reusability of your data by you, your collaborators, other researchers, and futureself. Your plan should ensure that detailed documentation adopting existing standards is developed during the entire duration of your project (don’t wait until the very end!!) and that this documentation is archived along with your data and code in a publicly accessible data repository will set you up for success.\n\n\n\nsource: https://www.library.ucsb.edu/sites/default/files/dls-n04-2021-fair-navy.pdf\n\n\nBelow is a set of questions that will help your team think about the data and resources you will need along your projects’ data lifecycle.\n\nDescribing the research data generated by your lab: Provide a description of the data the group will collect or re-use, including the file types, data set size, the number of expected files or sets, content, and source of the data (creator and method of collection).\n\nWhat data are needed?\nAre such data available?\nWhen and how will the data be acquired?\n\nData formats:\n\nAre there any standard formats in the specific research field for managing or disseminating the data sets that have been identified (e.g., XML, ASCII, CSV, .shp, .gdb, GeoTIFF)?\nWho from the group will have responsibility for ensuring that data standards are properly applied, and data are properly formatted?\n\nMetadata: Metadata is documentation that helps make data sets reusable. Think about what details someone would need in order to be able to understand and use these files. For example, perhaps a readme.txt file is necessary to explain variables, the structure of the files, etc. In addition, it is recommended to leverage metadata disciplinary standards, including ontologies and vocabularies. Here is a good resource for metadata standards in environmental sciences. When applicable, also describe other scientific products - models, scripts, and/or workflows - your group will be producing using README files and documenting your code.\nData sharing and access The data may have significant value for other researchers beyond this project, and sharing this data is part of the group’s responsibility as members of the scientific community. Specify the extent to which data can be reused, including any access limitations. List any proprietary software that might be needed to read the files. If some data is not shareable due to confidentiality, non-disclosure agreements (NDA), or disclosure risk, state such limitations and the rationale behind them.\nIntellectual property and re-use: If data were collected from the client organization, does the group have the right to redistribute it? If so, are there any restrictions on redistribution? If the group created its data files, would it assign a Creative Commons license to its data?\nData archiving and preservation: Throughout the project, the group may produce a large number of files. At the end of the project, groups must submit data produced by the project (except data protected by non-disclosure agreements) and when relevant raw data as well. Not all data needs to be saved. Here are some questions to ask yourselves:\n\nIf another researcher wanted to replicate the group’s work or re-use the group’s data, what data and documentation would be required for them to do so?\n\nWhere will the data and metadata be stored after the project is completed?\nIs there a subject-specific and/or open-access repository that is appropriate for the data?\n\n\nOne advantage to depositing your data in a data repository is that you can get a DOI that lets you easily share and cite your data. Most of the data repositories also track views, downloads, and citations for your data archive, which can be used as a metric or a proxy for research impact.",
    "crumbs": [
      "Managing your research data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#data-management-plan-tool",
    "href": "datamgmt_plan.html#data-management-plan-tool",
    "title": "Data Management Plan (DMP)",
    "section": "Data Management Plan Tool",
    "text": "Data Management Plan Tool\nThere is a tool that you can use to guide your process: the DMP Tool. It is a little bit like an online form on steroids. Note that you do not have to use this tool for your project, but from our experience, it provides good guidance for this process.\n\n(Almost) everything in one page: https://www.library.ucsb.edu/sites/default/files/dls-n05-2022-dmptool-navy_0.pdf\n\n\n\n\nGuidelines on developing your project data management plan using the DMP Tool: Renata G Curty. (2023). DMP Recommendations (DCC Template). Zenodo. https://doi.org/10.5281/zenodo.7566971\nGet started with the tool: http://dmptool.org/\nMake sure to create an account using your UCSB email!",
    "crumbs": [
      "Managing your research data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#using-your-data-management-plan",
    "href": "datamgmt_plan.html#using-your-data-management-plan",
    "title": "Data Management Plan (DMP)",
    "section": "Using your Data Management Plan",
    "text": "Using your Data Management Plan\nOk, you have a plan, now what!? A data management plan should be seen as a living document that you update as your project develops and data needs evolve. We thus recommend sharing this plan with all your team members and external partners when relevant. The DMP Tool has the capacity to share plans directly from the tool. If you do not choose to use it, we recommend choosing a file format that can be collectively edited and provide some versioning/track changes feature, such as Google Docs or other cloud-based storage and documents.",
    "crumbs": [
      "Managing your research data",
      "Plan"
    ]
  },
  {
    "objectID": "datamgmt_plan.html#further-reading-recommendations",
    "href": "datamgmt_plan.html#further-reading-recommendations",
    "title": "Data Management Plan (DMP)",
    "section": "Further Reading Recommendations",
    "text": "Further Reading Recommendations\n\nGood overview of Data management concepts: Arteaga Cuevas, Maria; Taylor, Shawna; and Narlock, Mikala. (2023). Introduction to Research Data Management for Researchers. Data Curation Network Primer for Researchers on how to Manage Data\nGood overview of the data lifecycle, including itemized checklist: https://osf.io/d8fqh",
    "crumbs": [
      "Managing your research data",
      "Plan"
    ]
  },
  {
    "objectID": "data_mgmt.html",
    "href": "data_mgmt.html",
    "title": "Managing your lab data",
    "section": "",
    "text": "Data are also part of the scientific products your Lab is producing. It is thus important to develop strategies to manage them well, so you can reuse them. Well managed, data can become an an asset for your lab and your collaborators. In the end, the goal of managing your data is to develop documentation that will enable others (including your future self) to understand and reuse those data sets. This documentation does not start when you are wrapping up your project, this process needs to be intergrate all along the data life cycle of your project.\n\n\nTo help you think about your Lab data management, you can divide the life cycle of a data set in several phases:\n\n\n\nResearch Data Management lifecycle; source: https://osf.io/d8fqh\n\n\n\n\n\nHere are a few prompts to help you start your thinking about how you manage your data and where are potential challenges. These prompts should help you to decide where to start and we encourge to discuss them with the entire team:\n\nWhat are your lab challenges related to accessing, manipulating and/or moving data?\nWhat are your lab needs, pain points, or where do you feel time is wasted related to ensuring future use of data by yourself or others?\nWhat are your main security or data loss concerns related to your data?\nWhat are your data that might contain sensitive information (geolocation, human subjects, …) and thus need special handling?\nHow have funder mandates for data or publication deposits created challenges for you?",
    "crumbs": [
      "Managing your research data",
      "What is data management?"
    ]
  },
  {
    "objectID": "data_mgmt.html#data-are-a-scientific-product",
    "href": "data_mgmt.html#data-are-a-scientific-product",
    "title": "Managing your lab data",
    "section": "",
    "text": "Data are also part of the scientific products your Lab is producing. It is thus important to develop strategies to manage them well, so you can reuse them. Well managed, data can become an an asset for your lab and your collaborators. In the end, the goal of managing your data is to develop documentation that will enable others (including your future self) to understand and reuse those data sets. This documentation does not start when you are wrapping up your project, this process needs to be intergrate all along the data life cycle of your project.\n\n\nTo help you think about your Lab data management, you can divide the life cycle of a data set in several phases:\n\n\n\nResearch Data Management lifecycle; source: https://osf.io/d8fqh\n\n\n\n\n\nHere are a few prompts to help you start your thinking about how you manage your data and where are potential challenges. These prompts should help you to decide where to start and we encourge to discuss them with the entire team:\n\nWhat are your lab challenges related to accessing, manipulating and/or moving data?\nWhat are your lab needs, pain points, or where do you feel time is wasted related to ensuring future use of data by yourself or others?\nWhat are your main security or data loss concerns related to your data?\nWhat are your data that might contain sensitive information (geolocation, human subjects, …) and thus need special handling?\nHow have funder mandates for data or publication deposits created challenges for you?",
    "crumbs": [
      "Managing your research data",
      "What is data management?"
    ]
  },
  {
    "objectID": "datamgmt_preserve.html",
    "href": "datamgmt_preserve.html",
    "title": "Preserve your data for reuse",
    "section": "",
    "text": "As you finalize your project, an important task is to archive your data in a publicly available repository (pending sensitivity and by non-disclosure agreement exceptions). There are a few important steps to ensure that your data can be reused by others and thus make your work more reproducible.",
    "crumbs": [
      "Managing your research data",
      "Preserve"
    ]
  },
  {
    "objectID": "datamgmt_preserve.html#what-scientific-products-to-preserve",
    "href": "datamgmt_preserve.html#what-scientific-products-to-preserve",
    "title": "Preserve your data for reuse",
    "section": "What scientific products to preserve?",
    "text": "What scientific products to preserve?\nOften the first question that comes to mind when starting to preserve your work is: What should I include in my data archive? Generally speaking, you want to preserve your work. This means capturing the methodology you used, the raw data you collected, any data cleaning you did, and any data and output (figure, report, etc.) you generated. Okay… so you mean everything!? Well, yes and no. Everything that was relevant to help you to come to the findings and conclusions discussed in your project report or any other publications and deliverables. Let’s break this down!\n\nRaw data\nHere are a few questions to ask yourself to determine if you should refer in your documentation to the raw data you used or also include them in your data archive.\n\nThe raw data is already publicly accessible, and the hosting solution (website, FTP server, etc.) seems well maintained (ideally providing a recommended citation)\n\n=&gt; Document the website or process you used to collect the data and when you accessed/downloaded the data you used. Try also to determine if a pecific version number is associated with the data you used.*\n\nThe raw data is not publicly accessible\n\nNote that we are not talking about data under a non-disclosure agreement (NDA) here but more about data with an unclear reuse status or obtained by interactions with a person or an institution. For example, if the data you used were sent to you privately, then we recommend that you:\n\ninquire with your person of contact about the status of licensing and if they would be willing to let you share those data publicly. You might face resistance at first, so take the time to explain why you think it is valuable to your work to also share those data sets.\nif, in the end, it is not possible to share the data, please still describe the data in your documentation and list the contact information (person or institution) to inquire about this data set.\n\n\n\nIntermediate data\nThis is data you generated either while cleaning or analyzing the raw data. You should preserve it if:\n\nit was not directly generated by a script (otherwise, preserve the code instead)\nit has reusable value. For example, cleaned-up versions of raw data can be very valuable for others to reuse!\n\n\n\nCode\nScripting your analytical workflow from the raw data to the end products is a great way to make your work more reproducible and more reusable by others. We thus strongly encourage your team to develop code to process and analyze data. Cloud-based code repository services, such as GitHub, GitLab, BitBucket, and more, are a great way to both manage and preserve your code.\nThose services are often well-integrated with data repositories that link your code repository with your data archive. They also offer a way to tag a specific version of your code to ensure it is the exact code you used for a specific analysis.\n\n\nFinal products\nWe recommend including any data set used to produce statistics, figures maps, and other visualizations that were used in your work, in this case, even if generated by scripts.",
    "crumbs": [
      "Managing your research data",
      "Preserve"
    ]
  },
  {
    "objectID": "datamgmt_preserve.html#choosing-a-data-repository",
    "href": "datamgmt_preserve.html#choosing-a-data-repository",
    "title": "Preserve your data for reuse",
    "section": "Choosing a data repository",
    "text": "Choosing a data repository\nOK, we know what we want to archive. Now let’s decide where we want to preserve things!\nUCSB’s institutional data repository Dryad will be your default data repository. However, we encourage you to discuss with your Faculty Advisor to determine if other data repositories might suit your targeted audience/community better. If you would like to research on your own which data repository could be best for your project, the Registry of Research Data Repositories is a great resource to do so.\n\nDryad\nDryad is free of use for any affiliated researcher. Here is an overview of the process of submitting data to DRYAD:\n\n\n\nDRYAD data submission overview",
    "crumbs": [
      "Managing your research data",
      "Preserve"
    ]
  },
  {
    "objectID": "coding.html",
    "href": "coding.html",
    "title": "Code as scientific product",
    "section": "",
    "text": "Codes are part of the scientific products your Lab is producing. It is thus important to manage, document, and preserve them as you would do for any other of your scientific products. In this session, we will discuss tools and practices that can ease the management of your codes, as well as develop them in a collaborative way.",
    "crumbs": [
      "Coding as a Lab",
      "Code as scientific product"
    ]
  },
  {
    "objectID": "coding.html#code-repository",
    "href": "coding.html#code-repository",
    "title": "Code as scientific product",
    "section": "Code repository",
    "text": "Code repository\nAs data repositories, code repositories are a great way to preserve and share your code (including with your future self!!). One you might have already heard of is GitHub. However, there are other options such as GitLab, Bitbucket Source Forge, and more.\nIn this session, we will be focusing on using GitHub to collaborate and keep track of the development of our scripts.\n\nQuick intro to GitHub\n\nWhy\nWebsite interface walk-through\n\nGitHub Organizations\n\nWhy\nsetup\nmanage: teams and settings\n\nCollaborative coding workflows & techniques\n\nPair Programming\nCode Exchange\nBranch and fork workflows\n\nStreamlining documentation with templates\n\nRepositories",
    "crumbs": [
      "Coding as a Lab",
      "Code as scientific product"
    ]
  },
  {
    "objectID": "git_further_readings.html",
    "href": "git_further_readings.html",
    "title": "Further readings",
    "section": "",
    "text": "Jenny Bryan Happy git with R http://happygitwithr.com/\nIntro to GitHub and using git from RStudio GUI: http://ohi-science.org/data-science-training/collaborating.html\nIntro to git and Github using the command line: https://nceas.github.io/oss-lessons/version-control/1-git-basics.html\nTry git in 15min: https://try.github.io/levels/1/challenges/1\nGit terminology: https://www.atlassian.com/git/glossary/terminology\ngit rebase https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#git-general-introduction",
    "href": "git_further_readings.html#git-general-introduction",
    "title": "Further readings",
    "section": "",
    "text": "Jenny Bryan Happy git with R http://happygitwithr.com/\nIntro to GitHub and using git from RStudio GUI: http://ohi-science.org/data-science-training/collaborating.html\nIntro to git and Github using the command line: https://nceas.github.io/oss-lessons/version-control/1-git-basics.html\nTry git in 15min: https://try.github.io/levels/1/challenges/1\nGit terminology: https://www.atlassian.com/git/glossary/terminology\ngit rebase https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#git-workflows",
    "href": "git_further_readings.html#git-workflows",
    "title": "Further readings",
    "section": "Git workflows",
    "text": "Git workflows\n\nComparing workflow: https://www.atlassian.com/git/tutorials/comparing-workflows\nForking vs branching: https://stackoverflow.com/questions/3611256/forking-vs-branching-in-github\nDevelopment workflow: https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki/Development-workflow-with-Git:-Fork,-Branching,-Commits,-and-Pull-Request",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#branches",
    "href": "git_further_readings.html#branches",
    "title": "Further readings",
    "section": "Branches",
    "text": "Branches\n\nInteractive tutorial to learn more about git branches and more https://learngitbranching.js.org/",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "git_further_readings.html#undoing-things",
    "href": "git_further_readings.html#undoing-things",
    "title": "Further readings",
    "section": "Undoing things",
    "text": "Undoing things\n\nHelp to decide how to undo your problem: http://justinhileman.info/article/git-pretty/git-pretty.png\nUndo almost everything with git https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/\nDifference between git reset soft, mixed and hard https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/\nResetting, Checking Out & Reverting https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Git and GitHub further readings"
    ]
  },
  {
    "objectID": "03-handson_github_workflows.html",
    "href": "03-handson_github_workflows.html",
    "title": "GitHub workflows: forks and branches",
    "section": "",
    "text": "Setup\n\nPerson 1 (owner):\n\nCreate a repository using the following these instructions steps 1-6\n\n\n\nAdd Person 2 as collaborator following these instructions\nEdit the README to:\n\nReplace the title (first line starting with #) with something better! Maybe Favorite Desserts\nAdd your name and your favorite dessert below the title: e.g. - Julien: crepes\n\n\n\nknitr::include_graphics(\"img/github-readme_desserts.png\")\n\n\n\n\n\n\n\n\n\n\n\nForks\n\nPerson 2: Create a Fork\n\nAsk your teammate to Slack you the link to the repository\nCreate a Fork by clicking on the Fork button on the top right view of your repository homepage\n\n\n\n\n\n\n\n\n\n\n\nOn your Fork, start editing the README.md\nAdd your name and your favorite dessert below your teammate entry: e.g. - Sophia: chocolate\nAdd a descriptive commit message\n\n\nknitr::include_graphics(\"img/github-commit.png\")\n\n\n\n\n\n\n\n\n\nCommit your changes\n\n\n\n\n\n\n\n\n\n\n\nCreate a pull request to merge those changes to the main repository using these instructions\n\n\n\nPerson 1:\n\nGo to your repository and merge the PR\n\n\n\n\n\nBranches\n\nPerson 1: add a file\nDownload this csv file about your favorite desserts to your computer\n\nJust drag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file: e.g. Adding dessert csv & hit Commit changes\nYour file has been uploaded. Click on the filename to see it!\n\nYou should have something similar to this repo: https://github.com/brunj7/favorite-desserts/blob/master/favorite_desserts.csv\nNow you want to collaborate more closely and do not wan your teammate to have to create a fork and be able to work directly on your repository\n\nAdd Person 2 as a collaborator following these instructions\n\n\n\nPerson 2: Create a branch\n\nCheck your email or Github Notifications to accept the invitation\nGo to the repository website (link is provided in the invitation)\nCreate a new branch named after your first name\n\n\nknitr::include_graphics(\"img/github-create_branch.png\")\n\n\n\n\n\n\n\n\n\nEdit the csv file directly on GitHub to add your favorite dessert to it\nCreate a Pull Request (PR) to merge you branch back to main\nAssign person 1 as a reviewer (instructions)\n\n\n\nPerson 1: Merge the branch\n\nReview PR\nMerge and close PR",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Hands-on: forks & branches with Github website"
    ]
  },
  {
    "objectID": "02-handson_github_rstudio.html",
    "href": "02-handson_github_rstudio.html",
    "title": "GitHub branches using RStudio",
    "section": "",
    "text": "Write and R script to compare the csv with your favorite desserts you modified previously with the top 42 most iconic American desserts\n\nClone the repository you just created about your favorite desserts\nCreate a new branch using RStudio and name it *myinitials*_rstudio\nStart a new script named desserts_match_*myinitials*.R\nAs pair programming, write a script should read a csv file of your favorite dessert (create it if you do not have one yet) and the csv file with the most iconic desserts (see code below) into R and find out if your favorite dessert is part of the most iconic desserts!\nPush your changes to GitHub\nOn the GitHub website, create a Pull Request (PR) and assign your teammate as reviewer\nReviewer – Review the PR. Make comments and/or OK the merge\nRequester – Merge and close the PR\n\n\n\n\n\n\n\nCode to get the iconic desserts listing\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)  # use to scrape website content\n\n# Check if that data folder exists and creates it if not\ndir.create(\"data\", showWarnings = FALSE)\n\n# Read the webpage code\nwebpage &lt;- read_html(\"https://www.eatthis.com/iconic-desserts-united-states/\")\n\n# Extract the desserts listing\ndessert_elements&lt;- html_elements(webpage, \"h2\")\ndessert_listing &lt;- dessert_elements %&gt;% \n  html_text2() %&gt;%             # extracting the text associated with this type of elements of the webpage\n  as_tibble() %&gt;%              # make it a data frame\n  rename(dessert = value) %&gt;%  # better name for the column\n  head(.,-3) %&gt;%               # 3 last ones were not desserts \n  rowid_to_column(\"rank\") %&gt;%  # adding a column using the row number as proxy for the rank\n  write_csv(\"data/iconic_desserts.csv\") # save it as csv",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Hands-on: Branches using RStudio"
    ]
  },
  {
    "objectID": "02-handson_github_rstudio.html#is-your-fav-dessert-iconic",
    "href": "02-handson_github_rstudio.html#is-your-fav-dessert-iconic",
    "title": "GitHub branches using RStudio",
    "section": "",
    "text": "Write and R script to compare the csv with your favorite desserts you modified previously with the top 42 most iconic American desserts\n\nClone the repository you just created about your favorite desserts\nCreate a new branch using RStudio and name it *myinitials*_rstudio\nStart a new script named desserts_match_*myinitials*.R\nAs pair programming, write a script should read a csv file of your favorite dessert (create it if you do not have one yet) and the csv file with the most iconic desserts (see code below) into R and find out if your favorite dessert is part of the most iconic desserts!\nPush your changes to GitHub\nOn the GitHub website, create a Pull Request (PR) and assign your teammate as reviewer\nReviewer – Review the PR. Make comments and/or OK the merge\nRequester – Merge and close the PR\n\n\n\n\n\n\n\nCode to get the iconic desserts listing\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)  # use to scrape website content\n\n# Check if that data folder exists and creates it if not\ndir.create(\"data\", showWarnings = FALSE)\n\n# Read the webpage code\nwebpage &lt;- read_html(\"https://www.eatthis.com/iconic-desserts-united-states/\")\n\n# Extract the desserts listing\ndessert_elements&lt;- html_elements(webpage, \"h2\")\ndessert_listing &lt;- dessert_elements %&gt;% \n  html_text2() %&gt;%             # extracting the text associated with this type of elements of the webpage\n  as_tibble() %&gt;%              # make it a data frame\n  rename(dessert = value) %&gt;%  # better name for the column\n  head(.,-3) %&gt;%               # 3 last ones were not desserts \n  rowid_to_column(\"rank\") %&gt;%  # adding a column using the row number as proxy for the rank\n  write_csv(\"data/iconic_desserts.csv\") # save it as csv",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Hands-on: Branches using RStudio"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Designing a Reproducible and Collaborative Lab (RCL)",
    "section": "",
    "text": "Workshop Series and Coaching Sessions for Faculty and their Teams to help Research Labs set up infrastructures and practices to make their research more reproducible, enable reuse of their own work, and collaborate more effectively.\n\nTopics\n\nCoding as a lab\nManaging your lab data\nAutomating your analytical workflows\nDocumenting & preserving things to make them reusable\n\n\n\nFormat\n\nScheduled at your convenience\n4 workshops (2-3h) as a primer on a specific topic\nPersonalized coaching sessions focused on lab-specific needs\n\n\n\nOutcomes\n\nMore reproducible management of your lab’s scientific products (data, code etc.)\nBetter analytical strategies for collaboration Safety nets for your research lab content\nMore efficient reuse of your work\nStreamlined on- and off -boarding\n\n\n\nLearning Opportunities\n\nLeverage GitHub to manage and collaborate on your Lab’s code\nDevelop strategies to centralize and manage your Lab’s data\nSet up templates and guidelines on how to document your Lab research and improve its reusability\nEstablish Lab standard operating procedures and documentation standards\nProtect your Lab’s scientific products against loss through backup and computing resources strategies",
    "crumbs": [
      "About RCL"
    ]
  },
  {
    "objectID": "datamgmt_manage.html",
    "href": "datamgmt_manage.html",
    "title": "Manage your data as you go",
    "section": "",
    "text": "While actively working on your project, there are several practices that can help you to manage your data in an efficient manner that will help you to collaborate with others (including your future self!) and make your work more reproducible.",
    "crumbs": [
      "Managing your research data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#track-your-data-sources",
    "href": "datamgmt_manage.html#track-your-data-sources",
    "title": "Manage your data as you go",
    "section": "Track your data sources",
    "text": "Track your data sources\nAs you collect your data, if using pre-existing data sources, we strongly recommend that you keep track of where/by whom you accessed the data you will use. It can be a link to a data archive, an official agency website, or the contact information of a person. This data log can be developed using a spreadsheet that you can share with your team. The goal here is to make sure you can:\n\nGo back to the original source and the right version of the data\nCorrectly attribute/cite the data sources when you project\nReach out to data creators and ask for potential clarifications you might need to correctly interpret the data\nInquiry for any data updates at a later date",
    "crumbs": [
      "Managing your research data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#keep-raw-data-raw",
    "href": "datamgmt_manage.html#keep-raw-data-raw",
    "title": "Manage your data as you go",
    "section": "Keep raw data raw",
    "text": "Keep raw data raw\nDuring the data collection phase, also make sure to create a dedicated folder to save the raw data version you just acquired.\nIf you are using a programmatic approach to process your data (e.g., API), make sure to only read the raw data and save any processed intermediate data products in a different folder. We recommend changing the permissions on your raw data folder to read-only to avoid any unexpected incidents.\nIf you are accessing the data using a Graphical User Interface (GUI), we recommend you create a “working copy” of your raw data in a separate folder and use those files as it is often very easy to accidentally overwrite it.",
    "crumbs": [
      "Managing your research data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#project-organization",
    "href": "datamgmt_manage.html#project-organization",
    "title": "Manage your data as you go",
    "section": "Project organization",
    "text": "Project organization\nWe recommend encapsulating your project into one folder. It will make it more portable when combined with a relative path and help you keep the information centralized in one place. Here is a starting point for your file structure with three subfolders:\n\nData: where you will store your data with the following file structure\n\nInput_data: to store the raw data you collected or/and are reusing\nIntermediate_data: to store any cleaned or merged data sets\nAnalysis_data: any model analytical outputs that you computed\n\nCode or Scripts: you can store your scripts in this folder. You can keep everything within the folder using filename to organize it or create subfolders as needed\nResults: to store tables, graphs, reports, or any other scientific products you are producing\n\nIn the top-level folder, we also recommend you write a README to explain your project, list the contributors and provide information on how to best navigate your project folder as well as a short description of the files it contains.\n\n\n\nSource: RDS Data Literacy Series\n\n\nOf course, each project is different, so adapt these recommendations to your own project needs!",
    "crumbs": [
      "Managing your research data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#adopt-a-consistent-naming-convention",
    "href": "datamgmt_manage.html#adopt-a-consistent-naming-convention",
    "title": "Manage your data as you go",
    "section": "Adopt a consistent naming convention",
    "text": "Adopt a consistent naming convention\nDevelop naming conventions for files and folders:\n\nAvoid spaces (use underscores or dashes)\nAvoid punctuation or special characters\nTry to leverage alphabetical order (e.g., start with dates: 2020-05-08)\nUse descriptive naming (lite metadata)\nUse folders to structure/organize content\nKeep it simple\nMake it programmatically useful:\n\nUseful to select files (Wildcard *, regular expression)\nBut don’t forget Humans need to read file names too!!\nTip: leverage the use of _ and - to make your filename readable by both Humans and machines!\n\n\n\nTry it:\nWhich filename would be the most useful?\n\n06-2020-08-sensor2-plot1.csv\n2020-05-08_light-sensor-1_plot-1.csv\nMeasurement 1.csv\n2020-05-08-light-sensor-1-plot-2.csv\n2020-05-08-windSensor1-plot3.csv\n\nRemember, the most important is to make it consistent!\nA good reference on this topic from Jenny Bryan (Posit).",
    "crumbs": [
      "Managing your research data",
      "Manage"
    ]
  },
  {
    "objectID": "datamgmt_manage.html#backup-your-data",
    "href": "datamgmt_manage.html#backup-your-data",
    "title": "Manage your data as you go",
    "section": "Backup your data",
    "text": "Backup your data\nDon’t forget, things happen!!!",
    "crumbs": [
      "Managing your research data",
      "Manage"
    ]
  },
  {
    "objectID": "collab_pairprog.html",
    "href": "collab_pairprog.html",
    "title": "Pair Programming",
    "section": "",
    "text": "Pair programming is an synchronous team activity, where several programmers get to work together on the same piece of code. This is a great way to gain a better sense of what coding style people are using and better understand their way of solving challenges. It is also a great way to learn from each other. Generally, there is one Driver who is the person typing at the computer. The other role is called Navigator(s). The Navigator does not write code and focuses on finding solutions to the problem. Their use of computers should be limited to searching online for solutions.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "collab_pairprog.html#basic-principles-practices",
    "href": "collab_pairprog.html#basic-principles-practices",
    "title": "Pair Programming",
    "section": "Basic principles & practices",
    "text": "Basic principles & practices\nAdapted from Woody Zuill https://www.agileconnection.com/article/getting-started-mob-programming\n\nTreat each other with kindness, consideration, and respect - makes group work more fun and sustainable\nDriver/navigator pair programming adapted to work with the whole team - “For an idea to go from your head into the computer, it must go through someone else’s hands.” Speak at the highest level of abstraction that the driver (and the rest of the team) is able to digest at the moment\nTimed Rotation - 20-40 minutes. We don’t require that everyone take the driver role; it is everyone’s choice whether to do so\nWhole Team - every contributor to the project is an integral part of the whole team; when we don’t have the skills we need within the team, we find someone who does and invite them to work with us to accomplish the needed work\nReflect, Tune, and Adjust Frequently - based on agile principle: “At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.”",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "collab_pairprog.html#tips-and-tricks-for-effective-team-programming",
    "href": "collab_pairprog.html#tips-and-tricks-for-effective-team-programming",
    "title": "Pair Programming",
    "section": "Tips and Tricks for Effective Team Programming",
    "text": "Tips and Tricks for Effective Team Programming\nAdapted from Corey Johannsen: https://blog.newrelic.com/2017/10/31/mob-programming-hurdles/\n\nSuggest, don’t dictate: Instead of telling the driver what to type into their editor, we explain what we are trying to accomplish and then help the driver find the best solution. We have found that drivers learn better this way, and they don’t just end up feeling like a stenographer. Whenever possible, we ask questions that lead the driver to discover the answers on their own.\nStay focused and be present: Shut your laptop and put your phone away. I have struggled with following this guideline—we all have—and I recognize that the distraction almost always affects the rest of the mob. We tell all our mob members to be present, and if you can not, it is OK to leave until you can be.\nUse a timer, but be ready to pause it: We switch drivers every 20 - 60 minutes. However, we often wander off implementation into design discussions—it’s unavoidable—so this is when we pause the timer. This is another key guideline of our mob: the time you spend driving should be dedicated to writing the code that helps complete the task, not discussing design solutions.\nSet specific tasks for each session: When our mob gathers for a session, we first agree on and create a checklist of the tasks we are going to complete and order them by priority on a whiteboard. This ensures we are all focused on the same task and keeps us moving forward. Additionally, this keeps us aligned with Minimal Marketable Feature (MMF) work, which we can communicate with our engineering and product managers to assure them we are completing tasks that align with developing small, self-contained features that demonstrate immediate customer value.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "collab_pairprog.html#acknowledgements",
    "href": "collab_pairprog.html#acknowledgements",
    "title": "Pair Programming",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis section reuses a lot of materials from an R Meetup organized by the Santa Barbara R Users group (https://github.com/R-Meetup-SB/hackathon-201806), including material prepared by Irene Steves.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Pair Programming"
    ]
  },
  {
    "objectID": "github_org.html",
    "href": "github_org.html",
    "title": "GitHub Organizations",
    "section": "",
    "text": "Facilitate collaboration:\n\nCreate teams to easily assign people to repositories\nManage tasks at the organization level (not tight to a specific repository)\n\nSimplify code management:\n\nThe organization owns the repository\nDesign templates to streamline documentation\nAssign roles to users, including external collaborators\n\nIncrease your visibility on GitHub:\n\nCreate a landing page introducing your lab\nOne stop to see your Lab contributions",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "GitHub Organizations for your Lab"
    ]
  },
  {
    "objectID": "github_org.html#why-a-github-organization",
    "href": "github_org.html#why-a-github-organization",
    "title": "GitHub Organizations",
    "section": "",
    "text": "Facilitate collaboration:\n\nCreate teams to easily assign people to repositories\nManage tasks at the organization level (not tight to a specific repository)\n\nSimplify code management:\n\nThe organization owns the repository\nDesign templates to streamline documentation\nAssign roles to users, including external collaborators\n\nIncrease your visibility on GitHub:\n\nCreate a landing page introducing your lab\nOne stop to see your Lab contributions",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "GitHub Organizations for your Lab"
    ]
  },
  {
    "objectID": "github_org.html#setting-up-your-labs-github-organization",
    "href": "github_org.html#setting-up-your-labs-github-organization",
    "title": "GitHub Organizations",
    "section": "Setting up your Lab’s GitHub Organization",
    "text": "Setting up your Lab’s GitHub Organization\nBefore setting up your organization, make sure that you have claimed your education GitHub account first!!\n\n\n\n\n\n\nDid you know you are eligible for GitHub Education perks?\n\n\n\nSince we are part of an University, students and faculty have access to special account benefits for free. The application process is straightforward. Get started here: https://education.github.com/\n\n\n\nYou can create an organization by clicking on the + sign menu at the top right of the GitHub taskbar and select New organization\n\n\n\n\n\n\n\nThis will send you to a new page with several options to start your organization. Choose the free option at this time.\n\n\n\n\n\n\n\nNow you can provide the name of your organization. We recommend naming it in a way that reflects your Lab name to help with the organization’s branding. Select the email you used to get the education discount and check the “my personal account” option.\n\n\n\n\n\n\n\nAnd congratulations this is it!! You can now invite your collaborators to the organization (you will be able to do so later as well).\n\n\n\n\n\n\n\nYour organization page should look as follows:\n\n\n\n\n\n\nNote all the suggestions that GitHub is providing to help you customize your organization according to your needs. We are going to follow the recommendation on the right side (red box above) to add a special README.md that will act as a landing page for our organization.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "GitHub Organizations for your Lab"
    ]
  },
  {
    "objectID": "github_org.html#customizing-your-github-organization",
    "href": "github_org.html#customizing-your-github-organization",
    "title": "GitHub Organizations",
    "section": "Customizing your GitHub Organization",
    "text": "Customizing your GitHub Organization\n\nAdding a landing page\nAdding a landing page is a great opportunity to describe your research lab and what content one can expect to find in this organization. It is also a good location to describe guidelines on how to best engage with you and provide contact information.\n\nClick on the create a README file on the right sidebar (see red box above). This will trigger the creation of a new special repository called .github that will be used to host your README file. Click Create repository.\n\n\n\n\n\n\n\nFill out the necessary information as follows:\n\n\n\n\n\n\nWe recommend checking the box Add a README file as a good practice but note it is not the README that will be used as your landing page, it is the one describing this new repository hosting your landing page README in a special subfolder.\n\nCreate your landing page by clicking on the Add README button on the right sidebar (red box below)\n\n Note the path to this special README: .github/profile/README.md\n\nEdit your landing page. The template used to create this special README provides suggestions about the type of information you might want to add to your landing page. Those suggestions are in a comment block (delimited by &lt;!-- & --&gt;) and thus won’t be shown when the README is rendered. We still do recommend deleting this block once you are done editing your README\n\n\n\n\n\n\nHere is an example of how we defined the landing page README for our test organization:\n\n\n\n\n\n\nSave your README: Now that you have your first version of your GitHub organization landing page (you can always iterate later on it), we are ready to save this version by clicking on the Commit changes button (red box above). This will prompt a new page where you can add a commit message to describe the changes. Finally, you can hit the Commit changes button to save this version.\n\n\n\n\n\n\nVoilà 🎉 !! When you go back to your organization’s main page, you should now see the text you just wrote at the top of the landing page!\n\n\n\n\n\n\n\nSetting up your organization profile\nNow that you have a landing page, it is also a great idea to fill out some metadata about your organization under the Settings tab of the main navigation bar (top right). This will help with the discovery of your Organization. You can provide a more Human friendly name, an email to reach out to you, a short description of your organization, and an URL such as your lab home page.\n\nFinally, click Update profile to save your changes.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "GitHub Organizations for your Lab"
    ]
  },
  {
    "objectID": "github_teams.html",
    "href": "github_teams.html",
    "title": "GitHub Teams",
    "section": "",
    "text": "You can use teams to manage access for people in an organization and for sending notifications (you can @team as you will do with @user in issues, commit messages, and more). Teams are a great way to manage access to repositories. You can add specific people to different teams and then you can use those teams to provide similar access to repositories. If you are familiar with Google Groups and how they can be used to provide access to folders in Google Drive, this is the same concept.\nTeams are very convenient when a set of collaborators work on the same project and therefore need the same access to different repositories within your organization. You can simply add the team to a specific repository and all the team members will be added to the repositories instead of having to add each user individually.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_teams.html#what-are-github-teams",
    "href": "github_teams.html#what-are-github-teams",
    "title": "GitHub Teams",
    "section": "",
    "text": "You can use teams to manage access for people in an organization and for sending notifications (you can @team as you will do with @user in issues, commit messages, and more). Teams are a great way to manage access to repositories. You can add specific people to different teams and then you can use those teams to provide similar access to repositories. If you are familiar with Google Groups and how they can be used to provide access to folders in Google Drive, this is the same concept.\nTeams are very convenient when a set of collaborators work on the same project and therefore need the same access to different repositories within your organization. You can simply add the team to a specific repository and all the team members will be added to the repositories instead of having to add each user individually.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_teams.html#create-a-team",
    "href": "github_teams.html#create-a-team",
    "title": "GitHub Teams",
    "section": "Create a team",
    "text": "Create a team\nIn the navigation bar at the top of your organization page, click on the Teams tab. Normally this is the page you use to see and manage the existing teams of your organization. Since we do not have teams yet, this page provides a short overview of what teams can be used for. Click on the New Team green button at the bottom to start creating your first team.\n\nProved the name and a short description of your team. We recommend to let the other options to their default settings.\n\n\n\n\n\nYour team has been created, but as of now you are the only member. Let’s invite some collaborators by clicking on the Add a member button on the top right.\n\n\n\n\n\nOn this new window, you can search for GitHub users by their username. If you do not know their username you can search by their full names. Note that if there are no pictures associated with the profile you found or are not sure it is the right person, we recommend not adding this person at this time and reaching out asking for their username (which is unique). When you are sure you found the right persons you can click on Invite.\n\n\n\n\n\nYour collaborators will receive an invitation to join the team. They will have to accept the invitation before they can use the benefits (access to repositories, …) associated with the team. Once your collaborators have accepted your team should look like below.\n\n\n\n\n\nOK, let’s create a second team! In this example, we will create a Research Facilitators team with two members.\n\n\n\n\n\nOnce your GitHub organization has teams, you will the number of existing teams next to the Teams tab.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_teams.html#leveraging-teams",
    "href": "github_teams.html#leveraging-teams",
    "title": "GitHub Teams",
    "section": "Leveraging teams",
    "text": "Leveraging teams\nLet’s create a new repository and use our newly created teams to add several collaborators at once.\n\n\n\n\n\nUnder your newly created organization, create a new repository with the following settings:\n\n\n\n\n\nOnce the repository is created, click on the Settings tab (top right in the grey bar)\n\n\n\n\n\nOn the left panel, click on Collaborators and teams and then click on the green button Add teams\n\n\n\n\n\nStart typing the name of the team you would like to add. Suggestions of teams should come up as you type. Select the relevant team by clicking on the suggestion.\n\n\n\n\n\nFor close collaborators, we recommend using the Maitain level of access that provides a good blend of people being able to do most of the actions they will need to do while not being allowed to conduct destructive actions on accident (like deleting the entire repository). For collaborators you are less familiar with, including their familiarity with GitHub, you might want to start with the Write access.\n\n\n\n\n\nOnce the team added, your settings should look as follow:\n\n\n\n\n\nThe good news is now if you add a collaborator to a specific team, this person will automatically gain access to all the repositories that team has access to! This will streamline the on- and off- boarding process of your team members.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Setting up Teams to better collaborate"
    ]
  },
  {
    "objectID": "github_intro.html",
    "href": "github_intro.html",
    "title": "git and GitHub",
    "section": "",
    "text": "Aka – Say goodbye to script_JB_03v5b.R !!\n\n\n\n\n\n\n\n\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\n\ngit: is a version control software used to track files in a folder (a repository)\n\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also adds many features to manage projects and document your work.\n\n\n\n\n\nThis section focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\n\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) =&gt; not meant for large data\n\n\n\n\n\n\n\nFun fact\n\n\n\n\n\nGit was initially designed and developed by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel in 2005. Here is a fun video of Linus Torvalds touting Git to Google engineers.\n\n\n\n\n\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there are many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository.\n\n\n\n\n\nGitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data.\n\n\nThis is the default landing page when you log into your account. It provides a mix of the most recent resources and activities of your and your collaborators’ actions, as well as some resources relevant to your work. The dashboard therefore changes on a regular basis. Once logged in, you can access your dashboard at https://github.com\n\n\n\n\nThis page can be reached using with the following URL: https://github.com/username. For my user (brunj7) it would be: https://github.com/brunj7. It is a great space for you to provide some information about yourself and the main repositories you are working on. It also lists the GitHub Organizations you are part of. But more importantly, Users own repositories to host and share their code. You can list repositories from a User by clicking on the repositories tab in the main GitHub menu bar at the top.\n\n\n\n\nWe will talk more about GitHub Organizations later. In a nutshell, organizations are like groups or teams that users can be members of. Like Users, Organizations can have a landing page and own repositories. However, they add several perks in terms of user management. Similarly to Users, you can access repositories from an Organization by clicking on the repositories tab in the main GitHub menu bar at the top. You can access an organization’s page similarly to a user: https://github.com/organization-name; e.g. https://github.com/UCSB-Library-Research-Data-Services\n\n\n\n\n\n\n\n\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\n\n\n\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\n\n\n\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n\n\n\n\n\nTracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\n\n\n\n\n\nGitHub.com / your dashboard (if logged in): https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/UCSB-Library-Research-Data-Services\n\n\n\n\nBraga PHP, Hébert K, Hudgins EJ, Scott ER, Edwards BPM, Sánchez Reyes LL, et al. Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution. Methods in Ecology and Evolution. 2023;14: 1364–1380. doi:10.1111/2041-210X.14108\n\n\n\nThis materials was adapted from NCEAS Reproducible Research Techniques for Synthesis & Collaborative Coding with GitHub. LNO Scientific Computing Team.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#the-problem-with-save_as",
    "href": "github_intro.html#the-problem-with-save_as",
    "title": "git and GitHub",
    "section": "",
    "text": "Every file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\n\ngit: is a version control software used to track files in a folder (a repository)\n\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also adds many features to manage projects and document your work.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#git",
    "href": "github_intro.html#git",
    "title": "git and GitHub",
    "section": "",
    "text": "This section focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\n\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) =&gt; not meant for large data\n\n\n\n\n\n\n\nFun fact\n\n\n\n\n\nGit was initially designed and developed by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel in 2005. Here is a fun video of Linus Torvalds touting Git to Google engineers.\n\n\n\n\n\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there are many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#github",
    "href": "github_intro.html#github",
    "title": "git and GitHub",
    "section": "",
    "text": "GitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data.\n\n\nThis is the default landing page when you log into your account. It provides a mix of the most recent resources and activities of your and your collaborators’ actions, as well as some resources relevant to your work. The dashboard therefore changes on a regular basis. Once logged in, you can access your dashboard at https://github.com\n\n\n\n\nThis page can be reached using with the following URL: https://github.com/username. For my user (brunj7) it would be: https://github.com/brunj7. It is a great space for you to provide some information about yourself and the main repositories you are working on. It also lists the GitHub Organizations you are part of. But more importantly, Users own repositories to host and share their code. You can list repositories from a User by clicking on the repositories tab in the main GitHub menu bar at the top.\n\n\n\n\nWe will talk more about GitHub Organizations later. In a nutshell, organizations are like groups or teams that users can be members of. Like Users, Organizations can have a landing page and own repositories. However, they add several perks in terms of user management. Similarly to Users, you can access repositories from an Organization by clicking on the repositories tab in the main GitHub menu bar at the top. You can access an organization’s page similarly to a user: https://github.com/organization-name; e.g. https://github.com/UCSB-Library-Research-Data-Services\n\n\n\n\n\n\n\n\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\n\n\n\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\n\n\n\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n\n\n\n\n\nTracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#recap",
    "href": "github_intro.html#recap",
    "title": "git and GitHub",
    "section": "",
    "text": "GitHub.com / your dashboard (if logged in): https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/UCSB-Library-Research-Data-Services",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#recommended-reading",
    "href": "github_intro.html#recommended-reading",
    "title": "git and GitHub",
    "section": "",
    "text": "Braga PHP, Hébert K, Hudgins EJ, Scott ER, Edwards BPM, Sánchez Reyes LL, et al. Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution. Methods in Ecology and Evolution. 2023;14: 1364–1380. doi:10.1111/2041-210X.14108",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_intro.html#aknowledgements",
    "href": "github_intro.html#aknowledgements",
    "title": "git and GitHub",
    "section": "",
    "text": "This materials was adapted from NCEAS Reproducible Research Techniques for Synthesis & Collaborative Coding with GitHub. LNO Scientific Computing Team.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Our tools: git & GitHub"
    ]
  },
  {
    "objectID": "github_workflows.html",
    "href": "github_workflows.html",
    "title": "Collaborative workflows to code together",
    "section": "",
    "text": "A fork is a copy of a repository that will be stored under your user account. Forking a repository allows you to freely experiment with changes without affecting the original project. We can create a fork on Github by clicking the “fork” button in the top right corner of our repository webpage. \nMost commonly, forks are used to either propose changes to someone else’s project or to use someone else’s project as a starting point for your own idea.\nWhen you are satisfied with your work, you can initiate a Pull Request to initiate discussion about your modifications and requesting to integrate your changes to the main repository. Your commit history allows the original repository administrators to see exactly what changes would be merged if they accept your request. Do this by going to the original repository and clicking the “New pull request” button\nNext, click “compare across forks”, and use the dropdown menus to select your fork as the “head fork” and the original repository as the “base fork”.\nThen type a title and description for the changes you would like to make. By using GitHub’s @mention syntax in your Pull Request message, you can ask for feedback from specific people or teams.\nThis workflow is recommended when you do not have push/write access to a repository, such as contributing to a open source software or R package, or if you are heavily changing a project.\n\n\n\nWhen you collaborate closely and actively with colleagues, you do not want necessarily to have to review all their changes through pull requests. You can then give them write access (git push) to your repository to allow them to directly edit and contribute to its content. This is the workflow we will recommend to use within your working group.\n\n\n\nClick on the repository\nOn the right panel, click \nOn the left pane, click Collaborators and enter the usernames you want to add\n\nUnder this collaborative workflow, we recommend to use git branches combined with pull requests to avoid conflicts and to track and discuss collaborators contributions.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_workflows.html#collaborating-through-forking-aka-the-github-workflow",
    "href": "github_workflows.html#collaborating-through-forking-aka-the-github-workflow",
    "title": "Collaborative workflows to code together",
    "section": "",
    "text": "A fork is a copy of a repository that will be stored under your user account. Forking a repository allows you to freely experiment with changes without affecting the original project. We can create a fork on Github by clicking the “fork” button in the top right corner of our repository webpage. \nMost commonly, forks are used to either propose changes to someone else’s project or to use someone else’s project as a starting point for your own idea.\nWhen you are satisfied with your work, you can initiate a Pull Request to initiate discussion about your modifications and requesting to integrate your changes to the main repository. Your commit history allows the original repository administrators to see exactly what changes would be merged if they accept your request. Do this by going to the original repository and clicking the “New pull request” button\nNext, click “compare across forks”, and use the dropdown menus to select your fork as the “head fork” and the original repository as the “base fork”.\nThen type a title and description for the changes you would like to make. By using GitHub’s @mention syntax in your Pull Request message, you can ask for feedback from specific people or teams.\nThis workflow is recommended when you do not have push/write access to a repository, such as contributing to a open source software or R package, or if you are heavily changing a project.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_workflows.html#collaborating-through-write-push-access",
    "href": "github_workflows.html#collaborating-through-write-push-access",
    "title": "Collaborative workflows to code together",
    "section": "",
    "text": "When you collaborate closely and actively with colleagues, you do not want necessarily to have to review all their changes through pull requests. You can then give them write access (git push) to your repository to allow them to directly edit and contribute to its content. This is the workflow we will recommend to use within your working group.\n\n\n\nClick on the repository\nOn the right panel, click \nOn the left pane, click Collaborators and enter the usernames you want to add\n\nUnder this collaborative workflow, we recommend to use git branches combined with pull requests to avoid conflicts and to track and discuss collaborators contributions.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_workflows.html#working-with-branches",
    "href": "github_workflows.html#working-with-branches",
    "title": "Collaborative workflows to code together",
    "section": "Working with branches",
    "text": "Working with branches\n\nCreating a new branch\nIn RStudio, you can create a branch using the git tab.\n\nClick on the branch button\n\n\n\n\n\n\n\n\n\n\n\nFill the branch name in the new branch window; in this example, we are going to use test for the name; leave the other options as default and click create\n\n\n\n\n\n\n\n\n\n\n\nyou will be directly creating a local and remote branch and switch to it\n\n\n\n\n\n\n\n\n\n\nCongratulations you just created your first branch!\nLet us check on Github:\n\n\n\n\n\n\n\n\n\nAs you can see, now there are two branches on our remote repository: - master - test\n\n\nUsing a branch\nHere there is nothing new. The workflow is exactly the same as we did before, excepts our commit will be created on the test branch instead of the master branch.",
    "crumbs": [
      "Coding as a Lab",
      "Collaborative strategies",
      "Collaborative workflows: forks & branches"
    ]
  },
  {
    "objectID": "github_template.html",
    "href": "github_template.html",
    "title": "Using GitHub Templates to document things",
    "section": "",
    "text": "You can create templates to model a specific repository setup when creating a new repository. The advantage of such a template is that you can provide a boilerplate for the README and any other files you would like your collaborators to provide when setting up a new project / repository.\nTo create a template repository you can either use an existing one or create a new one for this specific purpose. We are going to do the latter.\nLet’s create a new repository as we have done previously we recommend adding the word “template” in the name so it makes its purpose more obvious\n\n\n\n\n\nNow you can work on the content of the repository, for example adding a README with instructions to follow when setting up a new repository: https://github.com/awesomer-lab/repo-template\nOnce your repository is ready, you can go to the Settings tab in the taskbar of the repository and check the box Template repository under the repository name.\n\n\n\n\n\nNote that you can keep editing the template repository after this step.\nNow you can use your template when creating a new repository by selecting your template from the dropdown menu above the repository name. Note is might take a few seconds to fetch all your templates.\n\n\n\n\n\nVoilà! Now you can create standardized repositories and documentation quite easily!! Note that under the name of the newly created repository from the template, it is mentioned that it was created from a template.",
    "crumbs": [
      "Coding as a Lab",
      "Streamlining documentation",
      "Repository template"
    ]
  },
  {
    "objectID": "github_template.html#repository-templates",
    "href": "github_template.html#repository-templates",
    "title": "Using GitHub Templates to document things",
    "section": "",
    "text": "You can create templates to model a specific repository setup when creating a new repository. The advantage of such a template is that you can provide a boilerplate for the README and any other files you would like your collaborators to provide when setting up a new project / repository.\nTo create a template repository you can either use an existing one or create a new one for this specific purpose. We are going to do the latter.\nLet’s create a new repository as we have done previously we recommend adding the word “template” in the name so it makes its purpose more obvious\n\n\n\n\n\nNow you can work on the content of the repository, for example adding a README with instructions to follow when setting up a new repository: https://github.com/awesomer-lab/repo-template\nOnce your repository is ready, you can go to the Settings tab in the taskbar of the repository and check the box Template repository under the repository name.\n\n\n\n\n\nNote that you can keep editing the template repository after this step.\nNow you can use your template when creating a new repository by selecting your template from the dropdown menu above the repository name. Note is might take a few seconds to fetch all your templates.\n\n\n\n\n\nVoilà! Now you can create standardized repositories and documentation quite easily!! Note that under the name of the newly created repository from the template, it is mentioned that it was created from a template.",
    "crumbs": [
      "Coding as a Lab",
      "Streamlining documentation",
      "Repository template"
    ]
  },
  {
    "objectID": "git_conflicts.html",
    "href": "git_conflicts.html",
    "title": "Managing git merge conflicts",
    "section": "",
    "text": "You did nothing wrong!! Git is simply asking for your help to merge files because it can not figure it out on its own.\n\n\n\n\n\n\nOne thing to note before we continue\n\n\n\ngit pull = git fetch (getting things from GitHub) + git merge (merging the versions between your local and GitHub)\n\n\nA conflict arises when git can not automatically merge two versions of a file. When the changes are on different files or on the same file but far apart, git will figure it out on his own and do the merge automatically. However, if changes are overlapping, git will call you to the rescue because it is not sure which version should be kept. When you are in this situation, you are “stalled” between the git fetch & the git merge and you need to edit the file(s) where there is a conflict. Luckily, git will flag the lines that have different versions for you to look at.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Managing version conflicts"
    ]
  },
  {
    "objectID": "git_conflicts.html#how-to-minimize-the-risk-of-conflicts",
    "href": "git_conflicts.html#how-to-minimize-the-risk-of-conflicts",
    "title": "Managing git merge conflicts",
    "section": "How to minimize the risk of conflicts?",
    "text": "How to minimize the risk of conflicts?\n\nCommunicate!! Who is working on what script/file today? GitHub issues and tagging people is a great way to do this\ncommit, pull, and push often , so the changes between versions are kept minimal\n\nThese two tips should help you on your git conflict free journey!!\nIf conflicts keep happening in your collaboration, using git branches might be the next step to consider for your team.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Managing version conflicts"
    ]
  },
  {
    "objectID": "git_conflicts.html#example-using-rstudio",
    "href": "git_conflicts.html#example-using-rstudio",
    "title": "Managing git merge conflicts",
    "section": "Example using RStudio",
    "text": "Example using RStudio\nOk, let’s create a conflict with our favorite desserts repository.\nUser 1 is going to change a line on the README an push the change to GitHub.\n\n\n\n\n\nNow user 2, is going to also make an edit to the README on this same line while forgetting to pull before starting to edit the file\nIn this example, we will be changing the favorite dessert of the same person:\n\n\n\n\n\nSave and commit your changes.\nNow it is time to pull and push your changes… however git is unsure how to reconcile the two versions of the README.md\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBefore this you might first have the pop-up below on your screen that prompts you to tell git what techniques it should use to resolve conflicts\n\n\n\n\n\nWe recommend to choose the merge option by copy-pasting this line in the terminal:\ngit config pull.rebase false\n\n\nNote the tags that git has automatically inserted in the text to highlight: 1. where is the conflict and 2. what are the two versions you are trying to reconcile. Note also that RStudio is flagging the file with an orange U logo to let you know that the files are Unmerged.\n\n\n\n\n\nYou can edit the README to resolve the conflict to your liking. You could opt to choose one of the version\n\n\n\n\n\nor to come up with a “blended” version:\n\n\n\n\n\nOnce you are satisfied with your version, you can save the file and commit your changes\n\n\n\n\n\nDon’t forget to pull and push to synchronize your local changes with GitHub.\nIf you now look at the history, you can see how git has tracked the conflict resolution. We will talk about branches later on, but spoiler alert it looks very much how you would merge a branch back to the main branch.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Managing version conflicts"
    ]
  },
  {
    "objectID": "git_rstudio.html",
    "href": "git_rstudio.html",
    "title": "Using git and GitHub with RStudio",
    "section": "",
    "text": "This session will cover:",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#installing-git",
    "href": "git_rstudio.html#installing-git",
    "title": "Using git and GitHub with RStudio",
    "section": "Installing git",
    "text": "Installing git\nYou can download a copy of git here: https://git-scm.com/downloads and follow the instructions according to your Operating System.\n\nWindows\nYou can keep the options to default during the installation, until you reach Configuring the terminal emulator to use with Git Bash -&gt; be sure Use MinTTY is selected. This will install both git and a set of useful command-line tools using a trimmed down Bash shell.\n\n\nMac OSX\nDepending on the version, you might have to run a few commands from the terminal. Please refer to the README.txt that comes with the download regarding the exact steps to follow.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#setting-up-your-git-identity",
    "href": "git_rstudio.html#setting-up-your-git-identity",
    "title": "Using git and GitHub with RStudio",
    "section": "Setting up your git identity",
    "text": "Setting up your git identity\nBefore you start using git on any computer, you will have to set your identity on your system, as every snapshot of files is associated with the user who implemented the modifications to the file(s).\nOpen the Terminal or git bash and then type the following commands.\n\nSetup your profile\n\nAt the commande line\nIf you are not sure if you have already set your git identity you can check this running this command:\n\ngit config --global --list\n\nIf you identity is not set yet, you need to provide your name and email (we recommend to use the same email as used when setting your GitHub account):\n\ngit config --global user.name \"your Full Name\"\ngit config --global user.email \"your Email\"\n\n\nOptional\nCheck that everything is correct:\n\ngit config --global --list\n\nModify everything at the same time:\n\ngit config --global --edit\n\nSet your text editor:\n\ngit config --system core.editor nano\n\nHere nano is used as example; you can choose most of the text editor you might have installed on your computer (atom, sublime, notepad++ …).\nProblem with any of those steps? Check out Jenny Brian Happy git trouble shooting section\n\n\n\nUsing R\nIf you are an R user, the usethis package is your friend!! You can use this package to check and set up your git identity.\nCheck if you identity is set up:\n\n# install.packages(\"usethis\")\nusethis::git_sitrep()\n\nIf you git identity is not yet set, you should see something like this:\n\nYou can set your git user name and email as follow:\n\nusethis::use_git_config(user.name = \"Julien Brun\", user.email = \"julien.brun@ucsb.edu\")",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#linking-git-and-rstudio",
    "href": "git_rstudio.html#linking-git-and-rstudio",
    "title": "Using git and GitHub with RStudio",
    "section": "Linking git and RStudio",
    "text": "Linking git and RStudio\nIn most cases, RStudio should automatically detect git when it is installed on your computer. The best way to check this is to go to the Tools menu -&gt; Global Options and click on git/SVN\nIf git is properly set up, the window should look like this:\n\nClick OK.\nNote: if git was not enabled, you might be asked to restart RStudio to enable it.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#setting-up-your-github-personal-access-token-pat",
    "href": "git_rstudio.html#setting-up-your-github-personal-access-token-pat",
    "title": "Using git and GitHub with RStudio",
    "section": "Setting up your GitHub Personal Access Token (PAT)",
    "text": "Setting up your GitHub Personal Access Token (PAT)\nAlmost there! The last setup step we need to do is taking care of our authentication with GitHub, so we can download and upload changes to GitHub.\n\nusethis::create_github_token()\n\nThis will open your web browser and send you to a page on GitHub (you might be asked to log in your account). Most of the options have already been set for us, we only need to update:\n\nthe Note field by describing what is the token for. We recommend a combination describing the computer it is use on and what it is going to be use for.\nExpiration to 90 days. Note that GitHub will send you an email when it’s time to renew your token that is about to expire. It is easier to not let the token expire, otherwise you will have to regenerate a new one and do all the setup again.\n\n You can leave all the other options as selected. Click on Generate token green button at the bottom of the page.\nYou should be redirected to a new page where you can see your token. This is the only time you will be able to see it, so do not close this page before you are done with the setup!. Copy your PAT to your clipboard. Back to RStudio, run the following command:\n\ngitcreds::gitcreds_set()\n\nThis will prompt you to paste the PAT you just copied from GitHub. Paste your PAT and hit Enter. You you should see a few message letting you know that the token has been setup.\nCongratulations, you are all done with setting up your computer 🎉 It is a one time job, but note that if you use several computers/servers, you will have to do those steps again on each machine.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#basic-workflow-overview",
    "href": "git_rstudio.html#basic-workflow-overview",
    "title": "Using git and GitHub with RStudio",
    "section": "Basic Workflow Overview",
    "text": "Basic Workflow Overview\n\n\nYou modify files in your working directory and save them as usual\nYou add snapshots of your changed files to your staging area\nYou do a commit, which takes the files as they are in the staging area and permanently stores them as snapshots to your Git directory.\n\nWe can make an analogy with taking a family picture, where each family member would represent a file.\n\nAdding files (to the staging area), is like deciding which family member(s) are going to be on your next picture\nCommitting is like taking the picture\n\nThis 2-step process enables you to flexibly group files into a specific commit.\nThese steps are repeated for every version you want to keep (every time you would like to use save as). Every time you commit, you create a new snapshot, and you add the new version of the file to the git database while keeping all the previous versions in the database. It creates a history of the content of your repository that is like a graph that you can navigate:",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#using-git-from-rstudio",
    "href": "git_rstudio.html#using-git-from-rstudio",
    "title": "Using git and GitHub with RStudio",
    "section": "Using git from Rstudio",
    "text": "Using git from Rstudio\n\nTracking changes\nRStudio provides a great interface to git helping you navigate the git workflow and getting information about the state of your repository through nice icons and visualizations of the information.\nIf you click on the Git tab in your RStudio upper-right panel, you should see the following information\n\n\n\n\n\n\n\n\n\nThe RStudio Git pane lists every file that’s been added, modified or deleted. The icon describes the change:\n\n\n\n\n\nfrom R packages, H. Wickham\n\n\n\n\nIn our case, it means that:\n\nthe .gitignorefile has been modified since the last commit\nthe .Rproj file has never been tracked by git (remember RStudio just created this project file for us)\n\nNote also that the README.md file is not listed, but it exists (see Filespane). It is because files with no modifications since the last commit are not listed.\nGitHub has created the .gitignore file for us and we have not modified it since. So why is it listed as modified? We can check this by clicking on the Diff button (upper-left on the Git pane).\n\n\n\n\n\n\n\n\n\nWe can see that a new line (in green) has been added at the end of the .gitignore file. In fact, RStudio did that when creating the project to make sure that some temporary files were not tracked by git.\nLet us improve the content of the README.md file as below to make it more descriptive.\n\n\n\n\n\n\n\n\n\nAs soon as you save your changes, you should see the README.md file listed as modified in the git pane.\n\n\n\n\n\n\n\n\n\nLet us look at the diff of the README.md file. As you can see, the original lines are in red, in other words for git those lines have been deleted. The new lines that we just typed are in green, which indicates that these lines have been added for git. Note the line numbers in the left margin that help you to track which lines have been removed and added.\n\n\n\n\n\n\n\n\n\n\n\nKeeping Changes as Snapshots\nNow we would like to save a snapshot of this version of the README.md file. Here are the steps we will need to do:\n\nAdd the file to the next commit by checking the box in front of the file name in the git pane.\nNote that the icon M will move to the left to show you that this file is now staged to be part of the next commit\nCommit:\n\nClick the Commit button at the top of the git pane\nWrite a short but descriptive commit message in the new window\nClick on the the Commit button to save this version of the file in the git database\nClose the windows to get back to the main RStudio window\n\n\n\n\n\n\n\n\n\n\n\nOnce done, add both the .gitignore and the myfirst-repo.Rproj and commit those files together.\n Note that the icons at the top of the git pane have been organized in sequence from left to right to match the git workflow.\n\n\nGood Commit Message Tips\nClearly, good documentation of what you’ve done is critical to making the version history of your repository meaningful and helpful. It is tempting to skip the commit message altogether, or to add some simple message like ‘Updates’. It is better to use messages that will be helpful to your future self in deducing not just what you did, but why you did it. Also, commit messages are best understood if they follow the active verb convention. For example, you can see that my commit messages all started with a past tense verb, and then explained what was changed.\nWhile some of the changes we illustrated here were simple and easily explained in a short phrase, for more complex changes, it is best to provide a more complete message. The convention, however, is to always have a short, terse first sentence, followed by a more verbose explanation of the details and rationale for the change. This keeps the high level details readable in the version log. I can not count the number of times I have looked at the commit log from 2, 3, or 10 years prior and been so grateful for the diligence of my past self and collaborators.\n\n\n\n\n\nfrom xkcd comics",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#looking-at-the-repository-history",
    "href": "git_rstudio.html#looking-at-the-repository-history",
    "title": "Using git and GitHub with RStudio",
    "section": "Looking at the Repository History",
    "text": "Looking at the Repository History\nWe have done 2 new commits at this point. Let us look at the commit timeline we have created so far. You can click on the Clock icon at the top to visualize the history.\n\n\n\n\n\n\n\n\n\nYou can see that there has been 3 commits so far. The first one was done by GitHub when we created the repository and the 2 commits we just did. The most recent commit is at the top.",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  },
  {
    "objectID": "git_rstudio.html#sending-changes-back-to-github",
    "href": "git_rstudio.html#sending-changes-back-to-github",
    "title": "Using git and GitHub with RStudio",
    "section": "Sending changes back to GitHub",
    "text": "Sending changes back to GitHub\nNow that we have created these two commits on our local machine, our local version of the repository is different from the version on GitHub. RStudio communicate this information to you. If you look below the icons on the git pane, you will see the warning message: “Your branch is ahead of ‘origin/master’ by two commits”. This can be translated as you have two additional commits on your local machine that you never shared back to the remote repository on GitHub. Open your favorite web browser and look at the content of your repository on GitHub. You will see the old version of the README.md and .gitignore file and no trace of the .Rproj file.\n\n\n\n\n\n\n\n\n\nThere are two git commands to exchange between local and remote versions of a repository:\n\npull: git will get the latest remote version and try to merge it with your local version\npush: git will send your local version to the remote version of the repository (in our case GitHub)\n\nBefore sending your local version to the remote, you should always get the latest remote version first. In other words, you should pull first and push second. This is the way git protects the remote version against incompatibilities with the local version. You always deal with potential problems on your local machine. Therefore your sequence will always be:\n\npull\npush\n\nRStudio has icons for that on top of the git pane, with the blue arrow down being for pull and the green arrow up being for push. Remember the icons are organized in sequence!\nLet us do the pull and push to synchronize the remote repositories. We have now synchronized the local (our computer) and remote (on GitHub) versions of our repository.\n\n\n\n\n\n\n\n\n\nYou can now look at the page of your repository on GitHub, you should see 3 files with the exact same version that you have on your local!\n\n\n\n\n\n\nStage versus Commit\n\n\n\nThe functional difference between “staging” a file and “committing” one can be a little tough to grasp at first so let’s explore that briefly here. We can make an analogy with taking a family picture, where each family member would represent a file.\n\nStaging files is like deciding which family member(s) are going to be in your next picture\nCommitting is like taking the picture\n\nThis 2-step process enables you to flexibly group files into a specific commit. Those groupings can be helpful to you later if you’re trying to find what you changed for a specific task (because those changes likely are all in the same commit).",
    "crumbs": [
      "Coding as a Lab",
      "Coding together",
      "Using RStudio, git and GitHub to track your work"
    ]
  }
]